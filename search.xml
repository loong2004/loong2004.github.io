<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CISCN2022 Conversio</title>
    <url>/2024/09/28/CISCN2022%20Conversio/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928181849854.png"
                      alt="image-20240928181849854"
                ></p>
<p>这是一道编码题目</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928181932569.png"
                      alt="image-20240928181932569"
                ></p>
<p>直接ciphey一把梭了，flag{22be72da5c9c847c2b8a029ced6603c4}</p>
<p>这里放一个ciphey教程：<a href="https://loong2004.github.io/2024/09/28/%E8%A7%A3%E5%AF%86%E7%A5%9E%E5%99%A8-Ciphey%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">https://loong2004.github.io/2024/09/28/%E8%A7%A3%E5%AF%86%E7%A5%9E%E5%99%A8-Ciphey%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928182155658.png"
                      alt="image-20240928182155658"
                ></p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>CISCN2022 everlasting_night</title>
    <url>/2024/09/30/CISCN2022%20everlasting_night/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930101132507.png"
                      alt="image-20240930101132507"
                ></p>
<p>附件是一张图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930101151589.png"
                      alt="image-20240930101151589"
                ></p>
<ul>
<li>先拖进随波逐流一把梭看看</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930101734745.png"
                      alt="image-20240930101734745"
                ></p>
<ul>
<li>用Stegsolve打开看看，发现Alpha plane2有隐藏信息</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930102803748.png"
                      alt="image-20240930102803748"
                ></p>
<p>Data extract: f78dcd383f1b574b</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930103047622.png"
                      alt="image-20240930103047622"
                ></p>
<ul>
<li>用010打开看看</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930165740036.png"
                      alt="image-20240930165740036"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930170145139.png"
                      alt="image-20240930170145139"
                ></p>
<p>这里插播一下CTF文件头、尾：<a class="link"   href="https://blog.csdn.net/Ahuuua/article/details/109165473" >https://blog.csdn.net/Ahuuua/article/details/109165473 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>PNG的文件尾是AE426082，但我们发现这个文件尾后面还有一些字符：FB3EFCE4CEAC2F5445C7AE17E3E969AB</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930170502148.png"
                      alt="image-20240930170502148"
                ></p>
<p>那一串字符串是个啥？首先，应该不能是十六进制内容转成某个文件（就是把这串字符粘贴进010得到一个文件）</p>
<p>用basecrack识别一下，看看是不是base编码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930170748901.png"
                      alt="image-20240930170748901"
                ></p>
<p>很遗憾，不是。</p>
<p>那就试试md5解密，解出来是：ohhWh04m1</p>
<p>好，到目前为止，我们以及得到俩有用的字符串了（密钥？）</p>
<p>f78dcd383f1b574b和ohhWh04m1</p>
<p>接下来的思路，应该就是利用上述的密钥（还不确定是哪一个）来从图片中提取出一个东西</p>
<p>根据我目前掌握的知识来看，应该就三个工具，Stegsolve，Outguess和Cloacked-Pixel</p>
<p>我们挨个试试吧</p>
<ul>
<li><strong>Steghide</strong></li>
</ul>
<p>安装</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930171633193.png"
                      alt="image-20240930171633193"
                ></p>
<p>用法</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">提取：</span><br><span class="line">steghide extract -sf test.jpg -p 【密码】</span><br><span class="line">嵌入：</span><br><span class="line">steghide embed -cf test.jpg -ef secret.txt -p 【密码】</span><br></pre></td></tr></table></figure></div>

<p>是我错了，<strong>Steghide应该是针对JPG的题目</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930172348106.png"
                      alt="image-20240930172348106"
                ></p>
<ul>
<li><strong>Outguess</strong></li>
</ul>
<p><strong>Outguess也是针对JPG题目</strong>的，排除</p>
<ul>
<li><strong>Cloacked-Pixel</strong></li>
</ul>
<p>用法（<a class="link"   href="https://github.com/Grazee/cloacked-pixel-python3%EF%BC%89" >https://github.com/Grazee/cloacked-pixel-python3） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">加密：</span><br><span class="line">python3 lsb.py hide -i [img_file] -s [payload_file] -o [out_file] -p [password]</span><br><span class="line"></span><br><span class="line">解密</span><br><span class="line">python3 lsb.py extract -i [stego_file] -o [out_file] -p [password]</span><br><span class="line"></span><br><span class="line">隐藏</span><br><span class="line">python3 lsb.py analyse -i [stego_file]</span><br></pre></td></tr></table></figure></div>

<p>注意，Windows运行环境下，记得把python3改成python</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930173538441.png"
                      alt="image-20240930173538441"
                ></p>
<p>得到了一个加密的压缩包。毋庸置疑，ohhWh04m1就是压缩包的密码了</p>
<p>（至于f78dcd383f1b574b为啥是Cloacked-Pixel的密码，自己试一试就行了，总共就俩，试一试吧）</p>
<p>得到一个名为flag的文件，拓展名未知</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930173821977.png"
                      alt="image-20240930173821977"
                ></p>
<p>ohhWh04m1是ohh, who am i的意思，应该就是叫咱们判断它是什么文件类型（这是考点）</p>
<p>我用随波逐流一把梭和记事本打开看了看，应该是个图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930174320190.png"
                      alt="image-20240930174320190"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930174327579.png"
                      alt="image-20240930174327579"
                ></p>
<p>010显示这也是一个PNF图片，但我不知道为什么打不开！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930174928781.png"
                      alt="image-20240930174928781"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930174753146.png"
                      alt="image-20240930174753146"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930174833084.png"
                      alt="image-20240930174833084"
                ></p>
<p>网上找到了这个工具，可以打开它<a class="link"   href="https://www.gimp.org/%EF%BC%88Misc%E8%BF%98%E6%98%AF%E5%BE%97%E5%A4%9A%E7%94%A8%E5%B7%A5%E5%85%B7%EF%BC%89%EF%BC%88%E8%AE%B0%E5%BE%97%E6%8A%8A%E5%90%8E%E7%BC%80%E6%94%B9%E6%88%90.data%EF%BC%89" >https://www.gimp.org/（Misc还是得多用工具）（记得把后缀改成.data） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930180435985.png"
                      alt="image-20240930180435985"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930180946891.png"
                      alt="image-20240930180946891"
                ></p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-位域</title>
    <url>/2024/11/12/C%E8%AF%AD%E8%A8%80-%E4%BD%8D%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h1><p>在 C 语言中，<strong>位域</strong>（Bit Fields）是一种<strong>结构体成员</strong>，用于精确控制数据在内存中的位数，通常用于节省存储空间或直接操作位级数据。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>位域定义在结构体中，可以指定每个成员占用的<strong>比特位数</strong>。例如：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a : <span class="number">3</span>; <span class="comment">// a 占用 3 位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b : <span class="number">5</span>; <span class="comment">// b 占用 5 位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> c : <span class="number">1</span>; <span class="comment">// c 占用 1 位</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>在上面的例子中：</p>
<ul>
<li><code>a</code> 占 3 位，可以表示的值范围是 0 到 7（2的3次方，下面的例子依此类推）</li>
<li><code>b</code> 占 5 位，可以表示的值范围是 0 到 31（2的5次方）</li>
<li><code>c</code> 占 1 位，可以表示的值范围是 0 或 1（2的1次方）</li>
</ul>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><strong>节省内存</strong>：相比普通整型，位域只用<strong>指定的位数</strong>来存储，<strong>避免浪费空间</strong>。</p>
<p><strong>操作硬件寄存器</strong>：位域允许直接访问和修改某些位，非常适合底层硬件开发。</p>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flags</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flag1 : <span class="number">1</span>; <span class="comment">// 占 1 位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flag2 : <span class="number">1</span>; <span class="comment">// 占 1 位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> mode : <span class="number">3</span>;  <span class="comment">// 占 3 位</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Flags</span> <span class="title">f</span> =</span> &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>&#125;; <span class="comment">// 初始化位域</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag1: %u, flag2: %u, mode: %u\n&quot;</span>, f.flag1, f.flag2, f.mode);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-基础语法</title>
    <url>/2024/10/16/C%E8%AF%AD%E8%A8%80-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi 3.1415926 <span class="comment">// 宏定义，虽然未使用</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>; <span class="comment">// 函数声明，具体函数在main函数后</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;welcome to learn C!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num1, num2, num3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input two numbers\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;num1, &amp;num2); <span class="comment">//输入两个整数时记得用“空格”相隔</span></span><br><span class="line"></span><br><span class="line">    num3 = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the third number is:%d\n&quot;</span>, num3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2) <span class="comment">//比较大小</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num1 is greater than num2\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num1 is less than num2\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num1 is equal to num2\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;adding num1 and num2...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result:%d\n&quot;</span>, add(num1, num2)); <span class="comment">//调用add函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">它可以跨越多行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标识符是程序中变量、函数、数组等的名字。标识符由字母（大写或小写）、数字和下划线组成，但第一个字符必须是字母或下划线，不能是数字。</span></span><br><span class="line"><span class="comment">标识符区分大小写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">C语言中的字符串字面量是由双引号括起来的字符序列，例如：&quot;Hello, World!&quot;。</span></span><br><span class="line"><span class="comment">在C语言中，字符串字面量实际上是字符数组，以空字符&#x27;\0&#x27;结尾。</span></span><br><span class="line"><span class="comment">例如，字符串&quot;Hello, World!&quot;实际上包含13个字符（包括空格和标点符号），加上一个空字符&#x27;\0&#x27;，共14个字符。</span></span><br><span class="line"><span class="comment">char string[]=&quot;welcome to learn c!&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-存储类</title>
    <url>/2024/10/17/C%E8%AF%AD%E8%A8%80-%E5%AD%98%E5%82%A8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="auto-存储类"><a href="#auto-存储类" class="headerlink" title="auto 存储类"></a>auto 存储类</h2><p><strong>auto</strong> 存储类是所有局部变量默认的存储类。</p>
<p>定义在函数中的变量默认为 auto 存储类，这意味着它们在函数开始时被创建，在函数结束时被销毁。</p>
<h2 id="register-存储类"><a href="#register-存储类" class="headerlink" title="register 存储类"></a>register 存储类</h2><p><strong>register</strong> 存储类用于定义<strong>存储在寄存器</strong>中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个字），且不能对它应用一元的 ‘&amp;’ 运算符（因为<strong>它没有内存位置</strong>）。</p>
<p>register 存储类定义存储在寄存器，所以变量的访问速度更快，但是<strong>它不能直接取地址，因为它不是存储在 RAM 中</strong>的。在需要频繁访问的变量上使用 register 存储类可以提高程序的运行速度。寄存器只用于<strong>需要快速访问的变量，比如计数器</strong>。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p>
<h2 id="static-存储类"><a href="#static-存储类" class="headerlink" title="static 存储类"></a>static 存储类</h2><p><strong>static</strong> 存储类指示编译器在<strong>程序</strong>的<strong>生命周期内保持局部变量的存在</strong>，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 <strong>static 修饰局部变量</strong>可以在函数调用之间<strong>保持局部变量的值</strong>。</p>
<p><strong>static 修饰符也可以应用于全局变量</strong>。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>
<p>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。</p>
<p><strong>静态变量在程序中只被初始化一次</strong>，即使函数被调用多次，该变量的值也不会重置。</p>
<h2 id="extern-存储类"><a href="#extern-存储类" class="headerlink" title="extern 存储类"></a>extern 存储类</h2><p><strong>extern</strong> 存储类<strong>用于定义在其他文件中声明的全局变量或函数</strong>。当使用 extern 关键字时，不会为变量分配任何存储空间，而只是指示编译器该变量在其他文件中定义。</p>
<p><strong>extern</strong> 存储类用于提供一个<strong>全局变量</strong>的引用，全局变量对所有的程序文件都是可见的。当您使用 <strong>extern</strong> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>
<p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>MoeCTF2022 zip套娃</title>
    <url>/2024/10/02/MoeCTF2022%20zip%E5%A5%97%E5%A8%83/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002142835223.png"
                      alt="image-20241002142835223"
                ></p>
<p>附件是这个，没有伪加密</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002142905249.png"
                      alt="image-20241002142905249"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002142914922.png"
                      alt="image-20241002142914922"
                ></p>
<p>爆破一下，得到密码1235</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002142945154.png"
                      alt="image-20241002142945154"
                ></p>
<p>卧槽，套娃啊</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002143056261.png"
                      alt="image-20241002143056261"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002143841019.png"
                      alt="image-20241002143841019"
                ></p>
<p>爆破出来密码是1234567qwq</p>
<p>解压，还有！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002144046436.png"
                      alt="image-20241002144046436"
                ></p>
<p>这回爆破不出来了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002144152382.png"
                      alt="image-20241002144152382"
                ></p>
<p>试试伪加密</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002144258799.png"
                      alt="image-20241002144258799"
                ></p>
<p>然后伪加密修复一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002144320186.png"
                      alt="image-20241002144320186"
                ></p>
<p>拿到flag   moectf{!zip_qwq_ZIP}</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002144347279.png"
                      alt="image-20241002144347279"
                ></p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>HDCTF2023 ExtremeMisc</title>
    <url>/2024/09/24/HDCTF2023%20ExtremeMisc/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924191158214.png"
                      alt="image-20240924191158214"
                ></p>
<p>附件是一个图片，拖进随波逐流一把梭看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924191325433.png"
                      alt="image-20240924191325433"
                ></p>
<p>有文件包含</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924191533431.png"
                      alt="image-20240924191533431"
                ></p>
<p>我们用binwalk提取一下，有个加密的压缩包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924191634465.png"
                      alt="image-20240924191634465"
                ></p>
<p>没有伪加密</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924192042307.png"
                      alt="image-20240924192042307"
                ></p>
<p>爆破一下：haida</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924192151847.png"
                      alt="image-20240924192151847"
                ></p>
<p>解压缩一下加密的压缩包，得到了这个</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924192227528.png"
                      alt="image-20240924192227528"
                ></p>
<p>reverse.piz，不是reverse.zip？感觉是要文件反序，我们用010editor打开看看</p>
<p>这里先放个CTF文件头的学习链接：<a class="link"   href="https://blog.csdn.net/xiangshangbashaonian/article/details/80156865#:~:text=%E6%94%B6%E5%BD%95%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A0%87" >https://blog.csdn.net/xiangshangbashaonian/article/details/80156865#:~:text=%E6%94%B6%E5%BD%95%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A0%87 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924192610126.png"
                      alt="image-20240924192610126"
                ></p>
<p>原来是文件头不对，应该是504B0304，然后保存为reverse.zip</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924193054779.png"
                      alt="image-20240924193054779"
                ></p>
<p>好家伙，应该<strong>不仅仅</strong>是要把05B43040反序，而是应该<strong>读取十六进制内容</strong>，<strong>每两个</strong>进行<strong>反序</strong></p>
<p>我们先读取十六进制内容吧</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924195906506.png"
                      alt="image-20240924195906506"
                ></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">05 B4 <span class="number">30</span> <span class="number">40</span> <span class="number">51</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">90</span> <span class="number">00</span> 1F EB C8 <span class="number">65</span> 9F <span class="number">42</span> </span><br><span class="line"><span class="number">96</span> 08 A1 <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> E7 <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">90</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 05 C6 </span><br><span class="line"><span class="number">16</span> <span class="number">96</span> E6 E2 A7 <span class="number">96</span> 07 B1 <span class="number">65</span> 01 1C E7 <span class="number">66</span> D9 0A <span class="number">49</span> </span><br><span class="line"><span class="number">22</span> 2C <span class="number">95</span> B2 <span class="number">88</span> <span class="number">48</span> <span class="number">74</span> AB <span class="number">50</span> 7D <span class="number">65</span> <span class="number">97</span> <span class="number">60</span> <span class="number">72</span> DC D0 </span><br><span class="line"><span class="number">47</span> 6D 2C <span class="number">27</span> <span class="number">82</span> E8 ED 3B <span class="number">25</span> 8B <span class="number">62</span> D3 B8 D0 CC E0 </span><br><span class="line"><span class="number">32</span> A3 F8 <span class="number">61</span> <span class="number">39</span> CE <span class="number">16</span> FA 1B F0 C1 E4 EB 8B E8 A2 </span><br><span class="line">7A 9C <span class="number">32</span> D9 AB C3 <span class="number">40</span> <span class="number">84</span> FB <span class="number">87</span> <span class="number">64</span> F3 <span class="number">42</span> FE 1E <span class="number">58</span> </span><br><span class="line">CB <span class="number">15</span> <span class="number">69</span> 5D DB 0A AB <span class="number">69</span> C2 8E FE 1B 08 EC <span class="number">65</span> <span class="number">12</span> </span><br><span class="line"><span class="number">33</span> 4C <span class="number">48</span> 9E 5E <span class="number">66</span> 4F E1 B5 <span class="number">72</span> <span class="number">61</span> B7 AB <span class="number">56</span> 2C C0 </span><br><span class="line">C9 0B <span class="number">99</span> C8 2E D9 8B <span class="number">53</span> <span class="number">85</span> FA D9 <span class="number">68</span> <span class="number">93</span> C7 9B <span class="number">41</span> </span><br><span class="line">BA 8B 9A D1 <span class="number">53</span> <span class="number">13</span> 0D <span class="number">60</span> <span class="number">67</span> 8B B2 FF F4 AC E8 1B </span><br><span class="line"><span class="number">50</span> B8 <span class="number">61</span> D8 E5 2B C4 <span class="number">46</span> BA F9 AE <span class="number">94</span> D5 <span class="number">27</span> EF CC </span><br><span class="line"><span class="number">66</span> <span class="number">93</span> 7E B5 <span class="number">91</span> 9D 8F <span class="number">79</span> B1 C0 <span class="number">22</span> 0C 0C F2 E8 C9 </span><br><span class="line"><span class="number">95</span> 06 DD <span class="number">99</span> <span class="number">99</span> <span class="number">59</span> FA B6 2B <span class="number">47</span> <span class="number">22</span> B0 C7 E7 D4 <span class="number">51</span> </span><br><span class="line"><span class="number">72</span> FA <span class="number">35</span> <span class="number">27</span> <span class="number">11</span> C7 EA 3B <span class="number">33</span> <span class="number">67</span> 2A 04 EB 3B 5B A8 </span><br><span class="line">4D 2F <span class="number">44</span> <span class="number">67</span> 4F B7 01 <span class="number">28</span> <span class="number">34</span> CA E9 8E E0 F4 <span class="number">27</span> EA </span><br><span class="line"><span class="number">89</span> D4 <span class="number">20</span> <span class="number">75</span> DD C7 <span class="number">72</span> <span class="number">18</span> A5 4B <span class="number">87</span> BB 07 <span class="number">53</span> F4 B1 </span><br><span class="line">A6 <span class="number">98</span> 08 6E FC DF C8 5C <span class="number">44</span> E8 <span class="number">14</span> 5A E6 F3 <span class="number">74</span> 5E </span><br><span class="line">4B ED <span class="number">20</span> <span class="number">52</span> 03 <span class="number">99</span> <span class="number">55</span> 7B D8 A9 <span class="number">92</span> A8 A6 1B <span class="number">00</span> 0D </span><br><span class="line"><span class="number">33</span> <span class="number">86</span> A8 A7 CC AB A0 07 B3 E6 DE <span class="number">17</span> 9B B0 D6 E2 </span><br><span class="line"><span class="number">18</span> 05 B4 <span class="number">30</span> <span class="number">40</span> <span class="number">51</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">90</span> <span class="number">00</span> DF EB C8 <span class="number">65</span> BF </span><br><span class="line">FB <span class="number">81</span> <span class="number">42</span> <span class="number">59</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> EB <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> A0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">37</span> </span><br><span class="line"><span class="number">56</span> <span class="number">36</span> <span class="number">27</span> <span class="number">56</span> <span class="number">47</span> E2 A7 <span class="number">96</span> 07 <span class="number">66</span> F4 9B D3 <span class="number">17</span> <span class="number">41</span> <span class="number">20</span> </span><br><span class="line"><span class="number">90</span> <span class="number">75</span> C9 <span class="number">10</span> 4C <span class="number">48</span> AA F9 <span class="number">88</span> <span class="number">27</span> A3 C8 F6 <span class="number">78</span> <span class="number">78</span> C0 </span><br><span class="line">1C BF C0 CA <span class="number">49</span> 7B BC <span class="number">92</span> B2 5D A3 F0 D6 5A <span class="number">29</span> FD </span><br><span class="line"><span class="number">69</span> <span class="number">66</span> 4B <span class="number">15</span> <span class="number">46</span> B7 9F <span class="number">61</span> <span class="number">64</span> FB <span class="number">54</span> 0F EB 8F A6 <span class="number">22</span> </span><br><span class="line">E9 0F C3 <span class="number">23</span> ED E6 <span class="number">19</span> BE 5E 7A <span class="number">44</span> <span class="number">43</span> 07 <span class="number">10</span> <span class="number">86</span> D7 </span><br><span class="line"><span class="number">33</span> B1 E7 <span class="number">19</span> BA E3 <span class="number">52</span> 5F 1A F1 C4 <span class="number">38</span> <span class="number">43</span> 5A F0 0C </span><br><span class="line">7B <span class="number">41</span> 01 D8 <span class="number">40</span> <span class="number">96</span> E0 4D <span class="number">33</span> CD 2F F9 F7 <span class="number">00</span> <span class="number">94</span> 7E </span><br><span class="line"><span class="number">84</span> A8 03 01 <span class="number">93</span> <span class="number">13</span> CB A4 A3 6D <span class="number">14</span> <span class="number">60</span> 5B F6 A1 F3 </span><br><span class="line">A4 DB <span class="number">32</span> AE 3D <span class="number">62</span> <span class="number">31</span> A6 <span class="number">17</span> C9 <span class="number">86</span> <span class="number">45</span> <span class="number">52</span> 7C DB A8 </span><br><span class="line">4D <span class="number">96</span> 5F <span class="number">10</span> <span class="number">00</span> B4 C7 DB <span class="number">61</span> <span class="number">72</span> <span class="number">23</span> BA A5 A1 05 B4 </span><br><span class="line"><span class="number">10</span> <span class="number">20</span> F3 <span class="number">00</span> <span class="number">51</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">90</span> <span class="number">00</span> 1F EB C8 <span class="number">65</span> 9F <span class="number">42</span> </span><br><span class="line"><span class="number">96</span> 08 A1 <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> E7 <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">90</span> <span class="number">00</span> <span class="number">42</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 02 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 05 C6 <span class="number">16</span> <span class="number">96</span> </span><br><span class="line">E6 E2 A7 <span class="number">96</span> 07 A0 <span class="number">00</span> 02 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">81</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> FD <span class="number">53</span> <span class="number">73</span> <span class="number">75</span> D6 9D <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 05 B4 <span class="number">10</span> <span class="number">20</span> F3 <span class="number">00</span> <span class="number">51</span> </span><br><span class="line"><span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">90</span> <span class="number">00</span> DF EB C8 <span class="number">65</span> BF FB <span class="number">81</span> <span class="number">42</span> <span class="number">59</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> EB <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> A0 <span class="number">00</span> <span class="number">42</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 02 </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">14</span> <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">37</span> <span class="number">56</span> <span class="number">36</span> <span class="number">27</span> <span class="number">56</span> <span class="number">47</span> E2 A7 <span class="number">96</span> </span><br><span class="line">07 A0 <span class="number">00</span> 02 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">81</span> <span class="number">00</span> <span class="number">00</span> BF <span class="number">38</span> </span><br><span class="line"><span class="number">54</span> <span class="number">75</span> D6 9D <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 05 B4 <span class="number">50</span> <span class="number">60</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">20</span> <span class="number">00</span> <span class="number">20</span> </span><br><span class="line"><span class="number">00</span> 7B <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> EF <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br></pre></td></tr></table></figure></div>

<p>处理后的十六进制内容如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure></div>

<p>然后<strong>每读取两个</strong>进行<strong>反序</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="string">&quotquot;</span></span><br><span class="line"><span class="comment">#print(len(data))</span></span><br><span class="line">data_list = [data[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">2</span>)]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data_list:</span><br><span class="line">        d_reversed = d[::-<span class="number">1</span>]</span><br><span class="line">        f.write(d_reversed)</span><br></pre></td></tr></table></figure></div>

<p>结果如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure></div>

<p>然后ctrl+sheft+v粘贴进010editor，并更改后缀为.zip</p>
<p>里面又有俩压缩包！其中一个是Plain.zip，plain是明文的意思，盲猜明文攻击</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924200800522.png"
                      alt="image-20240924200800522"
                ></p>
<p>还是加密的！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924201204330.png"
                      alt="image-20240924201204330"
                ></p>
<p>爆破得到密码9724</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924201334851.png"
                      alt="image-20240924201334851"
                ></p>
<p>鉴定为明文攻击：<a class="link"   href="https://www.freebuf.com/articles/network/255145.html" >https://www.freebuf.com/articles/network/255145.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924201515125.png"
                      alt="image-20240924201515125"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924202456704.png"
                      alt="image-20240924202456704"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924202511622.png"
                      alt="image-20240924202511622"
                ></p>
<p>得到HDCTF{u_a_a_master_@_c0mpRe553d_PaCKe1s}</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>SFeatherCTF2024 1z_recover</title>
    <url>/2024/10/01/SFeatherCTF2024%201z_recover/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001214443612.png"
                      alt="image-20241001214443612"
                ></p>
<p>用010打开图片附件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001214557206.png"
                      alt="image-20241001214557206"
                ></p>
<p>发现zip信息</p>
<p>PNG文件尾是：AE 42 60 82</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001214631614.png"
                      alt="image-20241001214631614"
                ></p>
<p>把reversed的zip数据复制出来，并保存为reverse_zip</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001214739985.png"
                      alt="image-20241001214739985"
                ></p>
<p>使用脚本倒写：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;reverse_zip&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;result.zip&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        reversed_contents = f1.read()[::-<span class="number">1</span>]</span><br><span class="line">        f2.write(reversed_contents)</span><br></pre></td></tr></table></figure></div>

<p>用提示的密码解压：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001215408295.png"
                      alt="image-20241001215408295"
                ></p>
<p>但压缩包打不开，看看hint</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241008130528831.png"
                      alt="image-20241008130528831"
                ></p>
<p>将 flag.zip 放到 010 中全选，进行异或运算，即可还原出zip文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241008130612044.png"
                      alt="image-20241008130612044"
                ></p>
<p>用010查看图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241008130654479.png"
                      alt="image-20241008130654479"
                ></p>
<p>结尾的这段 a2V5Ojk1Mjc&#x3D; 经过base64解密得到:key:9527 </p>
<p>然后将 9527 作为密钥，使用 outguess 解密,将得到的内容保存在 flag.txt 中</p>
<p>命令：outguess -k “9527” -r flaggg.jpg flag.txt </p>
<p>得到 flag{C0n9ratu1ati0ns!_you_are_so_cool}</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>NISACTF2022 破损的flag</title>
    <url>/2024/09/22/NISACTF2022%20%E7%A0%B4%E6%8D%9F%E7%9A%84flag/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922192709580.png"
                      alt="image-20240922192709580"
                ></p>
<p>先把附件改成.pcapng后缀，是键盘流量信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922193319100.png"
                      alt="image-20240922193319100"
                ></p>
<p>然后附上脚本：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tshark -r usb.pcapng -T fields -e usb.capdata | sed <span class="string">&#x27;/^\s*$/d&#x27;</span> &gt; usbdata.txt</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"><span class="comment">#使用脚本删除空行</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">lines = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.strip(), lines)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(lines)</span><br><span class="line"><span class="comment">#将上面的文件用脚本分隔，加上冒号；</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) </span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">  a=f.readline().strip() </span><br><span class="line">  <span class="keyword">if</span> a:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>:<span class="comment">#键盘流量的话len为16鼠标为8 </span></span><br><span class="line">      out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">          out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          out+=a[i]+a[i+<span class="number">1</span>] </span><br><span class="line">      fi.write(out) </span><br><span class="line">      fi.write(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">  <span class="keyword">else</span>: </span><br><span class="line">    <span class="keyword">break</span> </span><br><span class="line">fi.close()</span><br><span class="line"><span class="comment">#最后用脚本提取</span></span><br><span class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">&quot;.&quot;</span> &#125;</span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    nums.append(<span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)) </span><br><span class="line">keys.close()</span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</span><br><span class="line">        output += mappings[n]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :\n&#x27;</span> + output)</span><br></pre></td></tr></table></figure></div>

<p>得到：UJKONJK,TFVBHYHJIPOKRDCVGRDCVGPOKQWSZTFVBHUJKOWAZXDQASEWSDRPOKXDFVIKLPNJKWSDRRFGYRDCVGUHNMKBHJMYHJI</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922193903433.png"
                      alt="image-20240922193903433"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922202346480.png"
                      alt="image-20240922202346480"
                ></p>
<p>i m g u l f f l a g i s w e l c o m e t f j n u</p>
<p>拼一下就得到flag,并且要补齐to</p>
<p>NSSCTF{welcome_to_fjnu}</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>SFeatherCTF2024 海尔之眼</title>
    <url>/2024/10/09/SFeatherCTF2024%20%E6%B5%B7%E5%B0%94%E4%B9%8B%E7%9C%BC/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009211950095.png"
                      alt="image-20241009211950095"
                ></p>
<p>附件是两张图片</p>
<p>先用010打开png图片，得到key：15740</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009212445947.png"
                      alt="image-20241009212445947"
                ></p>
<p>再看看jpg图片</p>
<p>这里插播一下文件头：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">jpg:</span><br><span class="line">文件头：FFD8FF， 文件尾： FFD9</span><br><span class="line"></span><br><span class="line"><span class="built_in">zip</span>:</span><br><span class="line">文件头：504B0304， 文件尾：504B</span><br></pre></td></tr></table></figure></div>

<p>我们先搜索一下jpg的文件尾：FFD9</p>
<p>发现jpg末尾有zip文件，但是缺少zip文件头。</p>
<p>我们把504B03041400补上，另存为flag.zip</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009213012030.png"
                      alt="image-20241009213012030"
                ></p>
<p>用key：15740去解压缩，发现密码不正确，因此猜测有隐写</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009220531310.png"
                      alt="image-20241009220531310"
                ></p>
<p>我试了试steghide和outguess，都不对</p>
<ul>
<li>steghide不对</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009221409258.png"
                      alt="image-20241009221409258"
                ></p>
<ul>
<li>outguess不对</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009221808007.png"
                      alt="image-20241009221808007"
                ></p>
<p>最后想了想应该是<a class="link"   href="https://sourceforge.net/projects/silenteye/%E8%BF%99%E4%B8%AA%E8%BD%AF%E4%BB%B6" >https://sourceforge.net/projects/silenteye/这个软件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009221226888.png"
                      alt="image-20241009221226888"
                ></p>
<p>得到flag{h@r_X4_Ya2}</p>
<p>完事了</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>SFeatherCTF2024 longpy</title>
    <url>/2024/10/08/SFeatherCTF2024%20longpy/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241008213518118.png"
                      alt="image-20241008213518118"
                ></p>
<p>题目附件是一张图片：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241008213543803.png"
                      alt="image-20241008213543803"
                ></p>
<p>用随波逐流修复一下宽高</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241008213602930.png"
                      alt="image-20241008213602930"
                ></p>
<p>提示pyc</p>
<p>把修复后的图片用010打开看看</p>
<p>搜索PNG的文件尾，发现文件尾后面有东西</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241008213854315.png"
                      alt="image-20241008213854315"
                ></p>
<p>应该是pyc数据</p>
<p>我们把PNG文件尾后的pyc数据另存为flag.pyc</p>
<p>然后使用<a class="link"   href="https://www.lddgo.net/string/pyc-compile-decompile%E5%9C%A8%E7%BA%BF%E5%8F%8D%E7%BC%96%E8%AF%91" >https://www.lddgo.net/string/pyc-compile-decompile在线反编译 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009173207050.png"
                      alt="image-20241009173207050"
                ></p>
<p>接着，base换表，提示为pyc隐写</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009173238044.png"
                      alt="image-20241009173238044"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241009173257284.png"
                      alt="image-20241009173257284"
                ></p>
<p>得到flag{Pyc_to_stegosaurus}</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>SUSCTF2024 flag存放指南</title>
    <url>/2024/09/24/SUSCTF2024%20flag%E5%AD%98%E6%94%BE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><a class="link"   href="https://gitee.com/yangyilong2004/ctfer-new-guide/tree/master/Misc/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/%5BSUSCTF%202024%5Dflag%E5%AD%98%E6%94%BE%E6%8C%87%E5%8D%97" >https://gitee.com/yangyilong2004/ctfer-new-guide/tree/master/Misc/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/%5BSUSCTF%202024%5Dflag%E5%AD%98%E6%94%BE%E6%8C%87%E5%8D%97 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>SFeatherCTF2024 诗词</title>
    <url>/2024/10/01/SFeatherCTF2024%20%E8%AF%97%E8%AF%8D/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001212535098.png"
                      alt="image-20241001212535098"
                ></p>
<p>先在word的设置里打开这个选项</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001212634715.png"
                      alt="image-20241001212634715"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001212648499.png"
                      alt="image-20241001212648499"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001212826496.png"
                      alt="image-20241001212826496"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip文件头：504B0304</span><br><span class="line">zip文件尾：504B</span><br></pre></td></tr></table></figure></div>

<p>把后缀改成.zip试试，也能正常解压</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001213340130.png"
                      alt="image-20241001213340130"
                ></p>
<p>其中有一个PNG文件，010打开又发现了zip信息</p>
<p>PNG文件尾：AE 42 60 82</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001223639974.png"
                      alt="image-20241001223639974"
                ></p>
<p>我们把PNG内容移除，保存为flag.zip</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001224104308.png"
                      alt="image-20241001224104308"
                ></p>
<p>压缩包内容如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241001224455549.png"
                      alt="image-20241001224455549"
                ></p>
<p>修改日期有问题，包是时间戳考点</p>
<p>提取时间戳隐藏的信息</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    filename = <span class="string">&quot;C:\\Users\\leeso\\Desktop\\flag\\&#123;0&#125;.txt&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    file_attr = os.stat(filename)<span class="comment">#读取文件属性</span></span><br><span class="line">    modify_time = <span class="built_in">str</span>(file_attr.st_mtime)</span><br><span class="line">    secret_numbers = <span class="built_in">int</span>(modify_time[<span class="number">7</span>:<span class="number">10</span>])</span><br><span class="line">    <span class="built_in">print</span>(secret_numbers, end = <span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>这些是隐藏信息的ascii码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">102,108,98,104,124,48,104,34,90,48,118,96,52,114,102,96,84,106,110,102,96,78,52,116,116,102,114,34,126</span><br></pre></td></tr></table></figure></div>

<p>把它转成字符：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">102</span>,<span class="number">108</span>,<span class="number">98</span>,<span class="number">104</span>,<span class="number">124</span>,<span class="number">48</span>,<span class="number">104</span>,<span class="number">34</span>,<span class="number">90</span>,<span class="number">48</span>,<span class="number">118</span>,<span class="number">96</span>,<span class="number">52</span>,<span class="number">114</span>,<span class="number">102</span>,<span class="number">96</span>,<span class="number">84</span>,<span class="number">106</span>,<span class="number">110</span>,<span class="number">102</span>,<span class="number">96</span>,<span class="number">78</span>,<span class="number">52</span>,<span class="number">116</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">114</span>,<span class="number">34</span>,<span class="number">126</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i)), end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002121401534.png"
                      alt="image-20241002121401534"
                ></p>
<p>奇怪，有些ascii码应该减去1，试试</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">123</span>,<span class="number">48</span>,<span class="number">104</span>,<span class="number">33</span>,<span class="number">89</span>,<span class="number">48</span>,<span class="number">117</span>,<span class="number">95</span>,<span class="number">52</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">84</span>,<span class="number">105</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">77</span>,<span class="number">52</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">33</span>,<span class="number">125</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i)), end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>得到flag{0h!Y0u_4re_Time_M4ster!}</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241002122033778.png"
                      alt="image-20241002122033778"
                ></p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>VSCode配置C/C++环境</title>
    <url>/2024/10/16/VSCode%E9%85%8D%E7%BD%AEC++%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p><strong>1，安装VSCode</strong></p>
<p>下载地址：<a class="link"   href="https://code.visualstudio.com/Download" >https://code.visualstudio.com/Download <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>选择对应的安装包，我的是Windows11</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016174212587.png"
                      alt="image-20241016174212587"
                ></p>
<p>安装即可，安装目录最好是英文</p>
<p><strong>2，安装VSCode-C++插件</strong></p>
<p>安装完VSCode后，按ctrl+shift+x打开拓展商店，搜索C&#x2F;C++插件，并安装</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016174437717.png"
                      alt="image-20241016174437717"
                ></p>
<p><strong>3，安装MinGW-w64</strong></p>
<p>下载地址： <a class="link"   href="https://sourceforge.net/projects/mingw-w64/postdownload" >https://sourceforge.net/projects/mingw-w64/postdownload <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这是一些安装失败问题的解决方案：<a class="link"   href="https://blog.csdn.net/qq_39588304/article/details/101119903" >https://blog.csdn.net/qq_39588304/article/details/101119903 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>安装完之后，我们需要复制一下这个路径</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016175350821.png"
                      alt="image-20241016175350821"
                ></p>
<p>这里我的是：D:\APP\mingw64\bin （根据你们的实际情况调整）</p>
<p>接下来编辑环境变量</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016175454131.png"
                      alt="image-20241016175454131"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016175506770.png"
                      alt="image-20241016175506770"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016175542332.png"
                      alt="image-20241016175542332"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016175601633.png"
                      alt="image-20241016175601633"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016175710241.png"
                      alt="image-20241016175710241"
                ></p>
<p>接着重启一下电脑，在终端中输入：gcc -v，有回显则说明安装成功！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016180015206.png"
                      alt="image-20241016180015206"
                ></p>
<p><strong>4，编辑VSCode里的设置</strong></p>
<p>首先在VSCode中打开一个用来存放C++代码的文件夹（路径最好是英文）</p>
<p>如图，我已经打开过了（只不过里面还木有存放代码）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016180631650.png"
                      alt="image-20241016180631650"
                ></p>
<p>然后按ctrl+shift+p，并搜索C&#x2F;C++ Edit Configurations(UI)</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016180832501.png"
                      alt="image-20241016180832501"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016180928196.png"
                      alt="image-20241016180928196"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016181059294.png"
                      alt="image-20241016181059294"
                ></p>
<hr>
<p>接下来，我们先随便写一个C++代码，保存（一定要保存）</p>
<p>（运行会报错，我们不管它）</p>
<p>注意，demo.cpp可以保存在任意位置，但不要保存在.vscode里面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016181640121.png"
                      alt="image-20241016181640121"
                ></p>
<p>按ctrl+shift+p，搜索Tasks:Configure Default Build Task</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016181820113.png"
                      alt="image-20241016181820113"
                ></p>
<p>再选择：“C&#x2F;C++: g++.exe build active file”</p>
<p>这时，.vscode文件夹中会出现一个tasks.json文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016182051978.png"
                      alt="image-20241016182051978"
                ></p>
<p>回到测试代码界面，按如图所示操作：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016183021454.png"
                      alt="image-20241016183021454"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016183325240.png"
                      alt="image-20241016183325240"
                ></p>
<p>完事了，运行demo.exe即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016183447884.png"
                      alt="image-20241016183447884"
                ></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>SWPUCTF2020 来猜谜了</title>
    <url>/2024/09/30/SWPUCTF2020%20%E6%9D%A5%E7%8C%9C%E8%B0%9C%E4%BA%86/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930001740893.png"
                      alt="image-20240930001740893"
                ></p>
<p>题目附件是一张图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930001820613.png"
                      alt="image-20240930001820613"
                ></p>
<p>拖进随波逐流一把梭看一下，发现有LSB低位隐写：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930001906476.png"
                      alt="image-20240930001906476"
                ></p>
<p>使用Stegsolve提取压缩包数据，另存为flag.zip，解压后是这个：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930002023655.png"
                      alt="image-20240930002023655"
                ></p>
<p>使用一把梭工具分析一下流量包：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930002105146.png"
                      alt="image-20240930002105146"
                ></p>
<p>怎么全是AGDX？用必应搜索一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930002221739.png"
                      alt="image-20240930002221739"
                ></p>
<p>哦，原来是ADFGX编码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/618497464a6d549353d606f62fed7910.png"
                      alt="618497464a6d549353d606f62fed7910"
                ></p>
<p>根据对照表，得出来gogogo</p>
<p>接下来就是outguess隐写了</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">加密：</span><br><span class="line">outguess -k &#x27;my secret key&#x27; -d hidden.txt demo.jpg out.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解密：</span><br><span class="line">outguess -k &#x27;my secret key&#x27; -r out.jpg hidden.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">outguess -k &#x27;gogogo&#x27; -r mi.jpg hidden.txt</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930005341204.png"
                      alt="image-20240930005341204"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240930005406230.png"
                      alt="image-20240930005406230"
                ></p>
<p>flag{Out9uEsS_1s_V4rY_e4sy}</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>SUSCTF2024 高清flag</title>
    <url>/2024/09/24/SUSCTF2024%20%E9%AB%98%E6%B8%85flag/</url>
    <content><![CDATA[<p><a class="link"   href="https://gitee.com/yangyilong2004/ctfer-new-guide/tree/master/Misc/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/%5BSUSCTF%202024%5D%E9%AB%98%E6%B8%85flag" >https://gitee.com/yangyilong2004/ctfer-new-guide/tree/master/Misc/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/%5BSUSCTF%202024%5D%E9%AB%98%E6%B8%85flag <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>UTCTF2020 Observe closely</title>
    <url>/2024/09/25/UTCTF2020%20Observe%20closely/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925111625297.png"
                      alt="image-20240925111625297"
                ></p>
<p>附件是一张图片：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925111710078.png"
                      alt="image-20240925111710078"
                ></p>
<p>我们拖进随波逐流一把梭看看</p>
<ul>
<li>有LSB隐写，提示这里没有flag</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925111920290.png"
                      alt="image-20240925111920290"
                ></p>
<ul>
<li>有文件包含</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925111957976.png"
                      alt="image-20240925111957976"
                ></p>
<p>使用binwalk提取一下，提取到的压缩包中有个elf文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925112256663.png"
                      alt="image-20240925112256663"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925112333119.png"
                      alt="image-20240925112333119"
                ></p>
<p>我们运行它一下，得到utflag{2fbe9adc2ad89c71da48cabe90a121c0}</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925112419324.png"
                      alt="image-20240925112419324"
                ></p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>广东省大学生攻防大赛2021 这是道签到题</title>
    <url>/2024/09/23/%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B2021%20%E8%BF%99%E6%98%AF%E9%81%93%E7%AD%BE%E5%88%B0%E9%A2%98/</url>
    <content><![CDATA[<p>附件是一个gif</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240923105522632.png"
                      alt="image-20240923105522632"
                ></p>
<p>本来想分帧处理，保险起见先拖入随波逐流一把梭</p>
<p>好家伙幸亏拖进去了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240923110932109.png"
                      alt="image-20240923110932109"
                ></p>
<p>把后缀改成.zip</p>
<p>然后把解压出来的图片拖进随波逐流一把梭</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240923111114402.png"
                      alt="image-20240923111114402"
                ></p>
<p>试了一下，TxnaVrv9nTiXlFaED3K34oYrCryk4sGK9&#x2F;3oqaDZ&#x2F;CRnzKxnA5JdgQ&#x3D;&#x3D;是DES解码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240923111224267.png"
                      alt="image-20240923111224267"
                ></p>
<p>得到flag{ab096922210dfd2ca59025513f0eef1c}</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>羊城杯2021 Baby_Forensic</title>
    <url>/2024/09/22/%E7%BE%8A%E5%9F%8E%E6%9D%AF2021%20Baby_Forensic/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240916130639644.png"
                      alt="image-20240916130639644"
                ></p>
<p>题目附件链接：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240916130748754.png"
                      alt="image-20240916130748754"
                ></p>
<p>首先进行imageinfo，查看镜像信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240916130948605.png"
                      alt="image-20240916130948605"
                ></p>
<p>然后cmdscan，查看一下cmd进程</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">python2 ../vol.py -f ../demo.raw --profile=WinXPSP2x86 cmdscan</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240916131708432.png"
                      alt="image-20240916131708432"
                ></p>
<p>应该跟git有关，而且我们还要想办法找到他的账号。这里我们使用filescan</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">python2 ../vol.py -f ../demo.raw --profile=WinXPSP2x86 filescan | grep -E &quot;txt|git&quot;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240916132031186.png"
                      alt="image-20240916132031186"
                ></p>
<p>使用dumpfiles把ssh.txt给dump下来</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">python2 ../vol.py -f ../demo.raw --profile=WinXPSP2x86 dumpfiles -Q 0x00000000020bf6a0 -D ../</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240916132355102.png"
                      alt="image-20240916132355102"
                ></p>
<p>dump下来是这个文件，我们base64解码一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240916132514742.png"
                      alt="image-20240916132514742"
                ></p>
<p>不错，得到邮箱了<a class="link"   href="mailto:&#x73;&#111;&#110;&#x67;&#53;&#x35;&#50;&#48;&#x38;&#x35;&#x31;&#48;&#x37;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;" >&#x73;&#111;&#110;&#x67;&#53;&#x35;&#50;&#48;&#x38;&#x35;&#x31;&#48;&#x37;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240916133446332.png"
                      alt="image-20240916133446332"
                ></p>
<p>在Github上搜索此用户，找到关键项目：<br><a class="link"   href="https://github.com/Ha1f00L/whatsthat" >https://github.com/Ha1f00L/whatsthat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>访问后下载项目中的__APP__，在其中可以找到：<br>U2FuZ0ZvcntTMF8zYXp5XzJfY3JhY2tfbm9vYl9wbGF5ZXJ9<br>base64解码后就得到了flag ：<code>SangFor&#123;S0_3azy_2_crack_noob_player&#125;</code></p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>明文攻击-bkcrack使用教程</title>
    <url>/2024/09/24/%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB-bkcrack%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924225536812.png"
                      alt="image-20240924225536812"
                ></p>
<p>项目地址：<a class="link"   href="https://github.com/kimci86/bkcrack" >https://github.com/kimci86/bkcrack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="一，安装教程"><a href="#一，安装教程" class="headerlink" title="一，安装教程"></a>一，安装教程</h1><p>1，下载地址：<a class="link"   href="https://github.com/kimci86/bkcrack/releases" >https://github.com/kimci86/bkcrack/releases <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> （推荐Windows版本）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924225829316.png"
                      alt="image-20240924225829316"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924225852318.png"
                      alt="image-20240924225852318"
                ></p>
<p>至此安装结束！</p>
<h1 id="二，使用参数"><a href="#二，使用参数" class="headerlink" title="二，使用参数"></a>二，使用参数</h1><p><strong>bkcrack常用参数：</strong></p>
<blockquote>
<p>-L 查看压缩包文件信息（比如加密算法）</p>
<p>-C 指定被加密的压缩包</p>
<p>-c 指定要提取的密文部分</p>
<p>-P 是未加密，且含有明文的zip压缩包（不是必须的）（如果使用，则要求加密方式相同）</p>
<p>-p 明文文件的位置（必须的）</p>
<p>-x 压缩包内目标文件的偏移地址 部分已知明文值</p>
<p>-o offset -p参数指定的明文在压缩包内目标文件的偏移量</p>
</blockquote>
<h2 id="1，查看算法"><a href="#1，查看算法" class="headerlink" title="1，查看算法"></a>1，查看算法</h2><div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">bkcrack <span class="literal">-L</span> secrets.zip</span><br></pre></td></tr></table></figure></div>

<p>可以列出文件内容，查看加密算法</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924230914026.png"
                      alt="image-20240924230914026"
                ></p>
<p>PS：ZipCrypto算法是一种不安全的算法，可以使用明文攻击来破解它</p>
<h2 id="2，提取密钥"><a href="#2，提取密钥" class="headerlink" title="2，提取密钥"></a>2，提取密钥</h2><p>此操作需要<strong>至少12字节</strong>的已知明文，<strong>相邻</strong>的已知明文越多，破解速度越快。</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">bkcrack <span class="literal">-C</span> 【加密的压缩包】 <span class="literal">-c</span> 【待提取的密文部分】 <span class="literal">-P</span> 【存放明文的压缩包（非必须）】 <span class="literal">-p</span> 【明文位置】</span><br></pre></td></tr></table></figure></div>

<ul>
<li>偏移量</li>
</ul>
<p>如果明文 对应 密文开头以外的部分，则可以指定偏移量。（若明文包含加密Header的一部分，则可能为负值）</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">bkcrack <span class="literal">-c</span> 【密文】 <span class="literal">-p</span> 【明文】 <span class="literal">-o</span> 【偏移量】</span><br></pre></td></tr></table></figure></div>

<ul>
<li>稀疏明文</li>
</ul>
<p>如果你知道很少的连续明文（在8到11个字节之间，不满12个），但知道一些其他已知偏移量的字节，则可以使用 -x参数，后跟偏移量和十六进制字节：</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">bkcrack <span class="literal">-c</span> 【密文】 <span class="literal">-p</span> 【明文】 <span class="literal">-x</span> <span class="number">25</span> <span class="number">4</span>b4f <span class="literal">-x</span> <span class="number">30</span> <span class="number">21</span></span><br></pre></td></tr></table></figure></div>

<h2 id="3，解密"><a href="#3，解密" class="headerlink" title="3，解密"></a>3，解密</h2><div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">bkcrack <span class="literal">-C</span> 【加密的压缩包】 <span class="literal">-k</span> b7509151 <span class="number">995</span>bc473 <span class="number">273</span>cf673 <span class="literal">-U</span> new.zip easypassword</span><br></pre></td></tr></table></figure></div>

<p>-C后跟的是加密的压缩包，-k后跟的是第二部提取出来的密钥，-U是解密后的压缩包（自己随便命名），easypassword是给新压缩包设置的密码（自己随便更改）。如果不想设置密码的话，不妨采用下面的这种方式：</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">bkcrack <span class="literal">-C</span> 【加密的压缩包】 <span class="literal">-k</span> <span class="number">12345678</span> <span class="number">23456789</span> <span class="number">34567890</span> <span class="literal">-D</span> decrypted.zip</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">bkcrack <span class="literal">-c</span> 【密文】 <span class="literal">-p</span> 【密文】 <span class="literal">-k</span> 【密钥】 <span class="literal">-d</span> 【想要得到的密文文件】</span><br></pre></td></tr></table></figure></div>

<h2 id="4，恢复密钥"><a href="#4，恢复密钥" class="headerlink" title="4，恢复密钥"></a>4，恢复密钥</h2><div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">bkcrack <span class="literal">-k</span> <span class="number">1</span>ded830c <span class="number">24454157</span> <span class="number">7213</span>b8c5 <span class="literal">-r</span> <span class="number">10</span> ?p</span><br></pre></td></tr></table></figure></div>

<p>指定密码长度</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">bkcrack <span class="literal">-k</span> <span class="number">18</span>f285c6 <span class="number">881</span>f2169 b35d661d <span class="literal">-r</span> <span class="number">11</span>..<span class="number">13</span> ?p</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>CTF教程分享</category>
      </categories>
  </entry>
  <entry>
    <title>广东强网杯 2021 pic</title>
    <url>/2024/09/24/%E5%B9%BF%E4%B8%9C%E5%BC%BA%E7%BD%91%E6%9D%AF2021%20pic/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924162449931.png"
                      alt="image-20240924162449931"
                ></p>
<p>附件是一个12.png，拖进随波逐流一把梭看一下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924162544453.png"
                      alt="image-20240924162544453"
                ></p>
<p>有文件包含，使用binwalk文件分离，分离得到了这些：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924162644386.png"
                      alt="image-20240924162644386"
                ></p>
<p>解压看看，有两个图片，盲猜是 盲水印，我们使用的工具是BlindWaterMark</p>
<p><a class="link"   href="https://github.com/chishaxie/BlindWaterMark" >https://github.com/chishaxie/BlindWaterMark <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>提取图中的盲水印 (需要原图)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python bwmforpy3.py decode 6.png 67.png flag.png</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/flag.png"
                      alt="flag"
                ></p>
<p>得到NSSCTF{VhdRCg1v7OzzoYM}</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>蓝帽杯2022 domainhacker</title>
    <url>/2024/09/22/%E8%93%9D%E5%B8%BD%E6%9D%AF2022%20domainhacker/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922225357637.png"
                      alt="image-20240922225357637"
                ></p>
<p>首先：统计-&gt;HTTP-&gt;请求</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922225513684.png"
                      alt="image-20240922225513684"
                ></p>
<p>这个1.php应该是木马文件</p>
<p>过滤一下http</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922225616088.png"
                      alt="image-20240922225616088"
                ></p>
<p>追踪一下tcp流</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922230017925.png"
                      alt="image-20240922230017925"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922230030662.png"
                      alt="image-20240922230030662"
                ></p>
<p>先url decode一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922230335317.png"
                      alt="image-20240922230335317"
                ></p>
<p>对这两处进行base64 decode</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922230528766.png"
                      alt="image-20240922230528766"
                ></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Q:为什么删去前面的8m和yd？</span><br><span class="line">A：</span><br><span class="line">Base64编码原理：Base64 是将三个字节（24位）一组的数据，分成4个6位的单元，每个单元对应一个Base64字符。因为 Base64 的字符集大小是64（2^6 = 64），6位数据可以表示64种不同的值。</span><br><span class="line">填充字符：如果原始数据长度不是3的倍数（即无法凑满24位），编码后会出现1或2个空余的6位组。这时候，Base64 会使用填充字符=来补齐。填充字符用于确保编码后的结果长度依然是4的倍数。</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922231852501.png"
                      alt="image-20240922231852501"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922231951681.png"
                      alt="image-20240922231951681"
                ></p>
<p>依此类推，在第13个流的地方</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922232413424.png"
                      alt="image-20240922232413424"
                ></p>
<p>同理，base64 decode</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922232432474.png"
                      alt="image-20240922232432474"
                ></p>
<p>我们看到了个1.rar，密码是SecretsPassw0rds</p>
<p>我们导出HTTP对象1.rar</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922232715142.png"
                      alt="image-20240922232715142"
                ></p>
<p>解密压缩包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240922232757084.png"
                      alt="image-20240922232757084"
                ></p>
<p>得到这个：</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  .<span class="comment">#####.   mimikatz 2.2.0 (x64) #19041 Jul 29 2021 11:16:51</span></span><br><span class="line"> .<span class="comment">## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span></span><br><span class="line"> <span class="comment">## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span></span><br><span class="line"> <span class="comment">## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz</span></span><br><span class="line"> <span class="string">&#x27;## v ##&#x27;</span>       Vincent LE TOUX             ( vincent.letoux@gmail.com )</span><br><span class="line">  <span class="string">&#x27;#####&#x27;</span>        &gt; https://pingcastle.com / https://mysmartlogon.com ***/</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># privilege::debug</span></span><br><span class="line">Privilege <span class="string">&#x27;20&#x27;</span> OK</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># sekurlsa::minidump lsass.dmp</span></span><br><span class="line"><span class="keyword">Switch</span> to MINIDUMP : <span class="string">&#x27;lsass.dmp&#x27;</span></span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># sekurlsa::logonpasswords</span></span><br><span class="line">Opening : <span class="string">&#x27;lsass.dmp&#x27;</span> file <span class="keyword">for</span> minidump...</span><br><span class="line"></span><br><span class="line">Authentication Id : <span class="number">0</span> ; <span class="number">996</span> (<span class="number">00000000</span>:<span class="number">000003</span>e4)</span><br><span class="line">Session           : Service from <span class="number">0</span></span><br><span class="line">User Name         : PDC<span class="variable">$</span></span><br><span class="line">Domain            : TEST</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : <span class="number">2022</span>/<span class="number">4</span>/<span class="number">15</span> <span class="number">22</span>:<span class="number">22</span>:<span class="number">24</span></span><br><span class="line">SID               : S<span class="literal">-1-5-20</span></span><br><span class="line">	msv :	</span><br><span class="line">	 [<span class="number">00000003</span>] Primary</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * NTLM     : <span class="number">416</span>f89c3a5deb1d398a1a1fce93862a7</span><br><span class="line">	 * SHA1     : <span class="number">54896</span>b6f5e60e9be2b46332b13d0e0f110d6518f</span><br><span class="line">	tspkg :	</span><br><span class="line">	wdigest :	</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * Password : (null)</span><br><span class="line">	kerberos :	</span><br><span class="line">	 * Username : pdc<span class="variable">$</span></span><br><span class="line">	 * Domain   : test.local</span><br><span class="line">	 * Password : <span class="number">15</span> e0 <span class="number">7</span>e <span class="number">07</span> d9 <span class="number">9</span>d <span class="number">3</span>d <span class="number">42</span> <span class="number">45</span> <span class="number">40</span> <span class="number">38</span> ec <span class="number">97</span> d6 <span class="number">25</span> <span class="number">59</span> c9 e8 <span class="number">05</span> d9 fa bd <span class="number">81</span> f9 <span class="number">2</span>e <span class="number">05</span> <span class="number">67</span> <span class="number">84</span> e1 a3 a3 ec eb <span class="number">65</span> ba <span class="number">6</span>e b9 <span class="number">60</span> <span class="number">9</span>b dd <span class="number">5</span>a <span class="number">74</span> <span class="number">4</span>b <span class="number">2</span>e <span class="number">07</span> <span class="number">68</span> <span class="number">94</span> fd a1 cb <span class="number">2</span>e <span class="number">7</span>b a2 <span class="number">13</span> <span class="number">07</span> <span class="number">31</span> <span class="number">34</span> c2 <span class="number">1</span>d e8 <span class="number">95</span> <span class="number">53</span> <span class="number">43</span> <span class="number">38</span> <span class="number">61</span> <span class="number">91</span> <span class="number">53</span> <span class="number">2</span>b c4 b0 <span class="number">3</span>e ea <span class="number">7</span>a <span class="built_in">ac</span> <span class="number">03</span> <span class="number">60</span> <span class="number">1</span>f bf e8 dc <span class="number">00</span> c5 fe <span class="number">13</span> ed <span class="number">7</span>a ca <span class="number">88</span> <span class="number">32</span> <span class="built_in">fc</span> d0 c6 ea d2 c7 b4 <span class="number">87</span> <span class="number">31</span> <span class="number">82</span> dd <span class="number">4</span>c <span class="number">96</span> <span class="number">4</span>f <span class="number">23</span> <span class="number">80</span> <span class="number">39</span> <span class="number">2</span>e <span class="number">31</span> b0 cf <span class="number">67</span> <span class="number">8</span>e <span class="number">63</span> b2 <span class="number">5</span>e f9 <span class="number">77</span> <span class="number">32</span> <span class="number">44</span> <span class="number">05</span> <span class="number">8</span>e <span class="number">22</span> f9 <span class="number">0</span>c <span class="number">69</span> <span class="number">32</span> <span class="number">64</span> <span class="number">1</span>b b8 <span class="number">2</span>d a0 <span class="number">99</span> <span class="number">0</span>e b8 <span class="number">0</span>e <span class="number">2</span>c <span class="number">10</span> b6 ff <span class="number">6</span>d <span class="number">5</span>f <span class="number">11</span> c9 <span class="number">5</span>e <span class="number">46</span> eb <span class="number">62</span> df <span class="number">00</span> <span class="number">7</span>a bd c6 <span class="number">7</span>b <span class="number">83</span> db <span class="number">0</span>f <span class="number">58</span> ed <span class="built_in">ac</span> a3 <span class="number">66</span> dd c2 ec df <span class="number">9</span>f <span class="number">22</span> b3 <span class="number">34</span> <span class="number">0</span>d <span class="number">07</span> <span class="number">89</span> ea <span class="number">3</span>b <span class="number">2</span>b b1 e1 f9 e2 e5 <span class="number">85</span> <span class="built_in">cd</span> a3 <span class="number">78</span> ae dd e3 <span class="number">98</span> <span class="number">78</span> <span class="number">39</span> <span class="number">8</span>e <span class="number">4</span>f <span class="number">49</span> <span class="number">5</span>a b6 <span class="number">05</span> <span class="number">4</span>c <span class="number">6</span>d <span class="number">1</span>a e6 fa <span class="number">30</span> c7 c6 fb <span class="number">4</span>d dc b4 ca f6 <span class="number">3</span>c <span class="number">20</span> fe <span class="number">70</span> eb e3 <span class="number">16</span> <span class="number">82</span> <span class="number">78</span> f8 <span class="number">49</span> <span class="number">8</span>d <span class="number">15</span> <span class="number">6</span>a <span class="number">15</span> <span class="number">10</span> <span class="built_in">ac</span> d8 <span class="number">68</span> f8 ef ad <span class="number">0</span>c c2 <span class="number">39</span> f2 ca <span class="number">80</span> ef <span class="number">96</span> </span><br><span class="line">	ssp :	KO</span><br><span class="line">	credman :	</span><br><span class="line"></span><br><span class="line">Authentication Id : <span class="number">0</span> ; <span class="number">997</span> (<span class="number">00000000</span>:<span class="number">000003</span>e5)</span><br><span class="line">Session           : Service from <span class="number">0</span></span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : <span class="number">2022</span>/<span class="number">4</span>/<span class="number">15</span> <span class="number">22</span>:<span class="number">22</span>:<span class="number">24</span></span><br><span class="line">SID               : S<span class="literal">-1-5-19</span></span><br><span class="line">	msv :	</span><br><span class="line">	tspkg :	</span><br><span class="line">	wdigest :	</span><br><span class="line">	 * Username : (null)</span><br><span class="line">	 * Domain   : (null)</span><br><span class="line">	 * Password : (null)</span><br><span class="line">	kerberos :	</span><br><span class="line">	 * Username : (null)</span><br><span class="line">	 * Domain   : (null)</span><br><span class="line">	 * Password : (null)</span><br><span class="line">	ssp :	KO</span><br><span class="line">	credman :	</span><br><span class="line"></span><br><span class="line">Authentication Id : <span class="number">0</span> ; <span class="number">70157</span> (<span class="number">00000000</span>:<span class="number">0001120</span>d)</span><br><span class="line">Session           : Interactive from <span class="number">1</span></span><br><span class="line">User Name         : DWM<span class="literal">-1</span></span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : <span class="number">2022</span>/<span class="number">4</span>/<span class="number">15</span> <span class="number">22</span>:<span class="number">22</span>:<span class="number">24</span></span><br><span class="line">SID               : S<span class="literal">-1-5-90-1</span></span><br><span class="line">	msv :	</span><br><span class="line">	 [<span class="number">00000003</span>] Primary</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * NTLM     : <span class="number">416</span>f89c3a5deb1d398a1a1fce93862a7</span><br><span class="line">	 * SHA1     : <span class="number">54896</span>b6f5e60e9be2b46332b13d0e0f110d6518f</span><br><span class="line">	tspkg :	</span><br><span class="line">	wdigest :	</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * Password : (null)</span><br><span class="line">	kerberos :	</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : test.local</span><br><span class="line">	 * Password : <span class="number">15</span> e0 <span class="number">7</span>e <span class="number">07</span> d9 <span class="number">9</span>d <span class="number">3</span>d <span class="number">42</span> <span class="number">45</span> <span class="number">40</span> <span class="number">38</span> ec <span class="number">97</span> d6 <span class="number">25</span> <span class="number">59</span> c9 e8 <span class="number">05</span> d9 fa bd <span class="number">81</span> f9 <span class="number">2</span>e <span class="number">05</span> <span class="number">67</span> <span class="number">84</span> e1 a3 a3 ec eb <span class="number">65</span> ba <span class="number">6</span>e b9 <span class="number">60</span> <span class="number">9</span>b dd <span class="number">5</span>a <span class="number">74</span> <span class="number">4</span>b <span class="number">2</span>e <span class="number">07</span> <span class="number">68</span> <span class="number">94</span> fd a1 cb <span class="number">2</span>e <span class="number">7</span>b a2 <span class="number">13</span> <span class="number">07</span> <span class="number">31</span> <span class="number">34</span> c2 <span class="number">1</span>d e8 <span class="number">95</span> <span class="number">53</span> <span class="number">43</span> <span class="number">38</span> <span class="number">61</span> <span class="number">91</span> <span class="number">53</span> <span class="number">2</span>b c4 b0 <span class="number">3</span>e ea <span class="number">7</span>a <span class="built_in">ac</span> <span class="number">03</span> <span class="number">60</span> <span class="number">1</span>f bf e8 dc <span class="number">00</span> c5 fe <span class="number">13</span> ed <span class="number">7</span>a ca <span class="number">88</span> <span class="number">32</span> <span class="built_in">fc</span> d0 c6 ea d2 c7 b4 <span class="number">87</span> <span class="number">31</span> <span class="number">82</span> dd <span class="number">4</span>c <span class="number">96</span> <span class="number">4</span>f <span class="number">23</span> <span class="number">80</span> <span class="number">39</span> <span class="number">2</span>e <span class="number">31</span> b0 cf <span class="number">67</span> <span class="number">8</span>e <span class="number">63</span> b2 <span class="number">5</span>e f9 <span class="number">77</span> <span class="number">32</span> <span class="number">44</span> <span class="number">05</span> <span class="number">8</span>e <span class="number">22</span> f9 <span class="number">0</span>c <span class="number">69</span> <span class="number">32</span> <span class="number">64</span> <span class="number">1</span>b b8 <span class="number">2</span>d a0 <span class="number">99</span> <span class="number">0</span>e b8 <span class="number">0</span>e <span class="number">2</span>c <span class="number">10</span> b6 ff <span class="number">6</span>d <span class="number">5</span>f <span class="number">11</span> c9 <span class="number">5</span>e <span class="number">46</span> eb <span class="number">62</span> df <span class="number">00</span> <span class="number">7</span>a bd c6 <span class="number">7</span>b <span class="number">83</span> db <span class="number">0</span>f <span class="number">58</span> ed <span class="built_in">ac</span> a3 <span class="number">66</span> dd c2 ec df <span class="number">9</span>f <span class="number">22</span> b3 <span class="number">34</span> <span class="number">0</span>d <span class="number">07</span> <span class="number">89</span> ea <span class="number">3</span>b <span class="number">2</span>b b1 e1 f9 e2 e5 <span class="number">85</span> <span class="built_in">cd</span> a3 <span class="number">78</span> ae dd e3 <span class="number">98</span> <span class="number">78</span> <span class="number">39</span> <span class="number">8</span>e <span class="number">4</span>f <span class="number">49</span> <span class="number">5</span>a b6 <span class="number">05</span> <span class="number">4</span>c <span class="number">6</span>d <span class="number">1</span>a e6 fa <span class="number">30</span> c7 c6 fb <span class="number">4</span>d dc b4 ca f6 <span class="number">3</span>c <span class="number">20</span> fe <span class="number">70</span> eb e3 <span class="number">16</span> <span class="number">82</span> <span class="number">78</span> f8 <span class="number">49</span> <span class="number">8</span>d <span class="number">15</span> <span class="number">6</span>a <span class="number">15</span> <span class="number">10</span> <span class="built_in">ac</span> d8 <span class="number">68</span> f8 ef ad <span class="number">0</span>c c2 <span class="number">39</span> f2 ca <span class="number">80</span> ef <span class="number">96</span> </span><br><span class="line">	ssp :	KO</span><br><span class="line">	credman :	</span><br><span class="line"></span><br><span class="line">Authentication Id : <span class="number">0</span> ; <span class="number">267962</span> (<span class="number">00000000</span>:<span class="number">000416</span>ba)</span><br><span class="line">Session           : Interactive from <span class="number">1</span></span><br><span class="line">User Name         : administrator</span><br><span class="line">Domain            : TEST</span><br><span class="line">Logon Server      : PDC</span><br><span class="line">Logon Time        : <span class="number">2022</span>/<span class="number">4</span>/<span class="number">15</span> <span class="number">22</span>:<span class="number">28</span>:<span class="number">02</span></span><br><span class="line">SID               : S<span class="literal">-1-5-21-3633886114-1307863022-927341053-500</span></span><br><span class="line">	msv :	</span><br><span class="line">	 [<span class="number">00000003</span>] Primary</span><br><span class="line">	 * Username : Administrator</span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * NTLM     : a85016dddda9fe5a980272af8f54f20e</span><br><span class="line">	 * SHA1     : <span class="number">6</span>f5f2ed7cc12564ac756917b3ee54d5396bed5ad</span><br><span class="line">	 [<span class="number">00010000</span>] CredentialKeys</span><br><span class="line">	 * NTLM     : a85016dddda9fe5a980272af8f54f20e</span><br><span class="line">	 * SHA1     : <span class="number">6</span>f5f2ed7cc12564ac756917b3ee54d5396bed5ad</span><br><span class="line">	tspkg :	</span><br><span class="line">	wdigest :	</span><br><span class="line">	 * Username : Administrator</span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * Password : (null)</span><br><span class="line">	kerberos :	</span><br><span class="line">	 * Username : administrator</span><br><span class="line">	 * Domain   : TEST.LOCAL</span><br><span class="line">	 * Password : (null)</span><br><span class="line">	ssp :	KO</span><br><span class="line">	credman :	</span><br><span class="line"></span><br><span class="line">Authentication Id : <span class="number">0</span> ; <span class="number">70375</span> (<span class="number">00000000</span>:<span class="number">000112</span>e7)</span><br><span class="line">Session           : Interactive from <span class="number">1</span></span><br><span class="line">User Name         : DWM<span class="literal">-1</span></span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : <span class="number">2022</span>/<span class="number">4</span>/<span class="number">15</span> <span class="number">22</span>:<span class="number">22</span>:<span class="number">24</span></span><br><span class="line">SID               : S<span class="literal">-1-5-90-1</span></span><br><span class="line">	msv :	</span><br><span class="line">	 [<span class="number">00000003</span>] Primary</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * NTLM     : <span class="number">416</span>f89c3a5deb1d398a1a1fce93862a7</span><br><span class="line">	 * SHA1     : <span class="number">54896</span>b6f5e60e9be2b46332b13d0e0f110d6518f</span><br><span class="line">	tspkg :	</span><br><span class="line">	wdigest :	</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * Password : (null)</span><br><span class="line">	kerberos :	</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : test.local</span><br><span class="line">	 * Password : <span class="number">15</span> e0 <span class="number">7</span>e <span class="number">07</span> d9 <span class="number">9</span>d <span class="number">3</span>d <span class="number">42</span> <span class="number">45</span> <span class="number">40</span> <span class="number">38</span> ec <span class="number">97</span> d6 <span class="number">25</span> <span class="number">59</span> c9 e8 <span class="number">05</span> d9 fa bd <span class="number">81</span> f9 <span class="number">2</span>e <span class="number">05</span> <span class="number">67</span> <span class="number">84</span> e1 a3 a3 ec eb <span class="number">65</span> ba <span class="number">6</span>e b9 <span class="number">60</span> <span class="number">9</span>b dd <span class="number">5</span>a <span class="number">74</span> <span class="number">4</span>b <span class="number">2</span>e <span class="number">07</span> <span class="number">68</span> <span class="number">94</span> fd a1 cb <span class="number">2</span>e <span class="number">7</span>b a2 <span class="number">13</span> <span class="number">07</span> <span class="number">31</span> <span class="number">34</span> c2 <span class="number">1</span>d e8 <span class="number">95</span> <span class="number">53</span> <span class="number">43</span> <span class="number">38</span> <span class="number">61</span> <span class="number">91</span> <span class="number">53</span> <span class="number">2</span>b c4 b0 <span class="number">3</span>e ea <span class="number">7</span>a <span class="built_in">ac</span> <span class="number">03</span> <span class="number">60</span> <span class="number">1</span>f bf e8 dc <span class="number">00</span> c5 fe <span class="number">13</span> ed <span class="number">7</span>a ca <span class="number">88</span> <span class="number">32</span> <span class="built_in">fc</span> d0 c6 ea d2 c7 b4 <span class="number">87</span> <span class="number">31</span> <span class="number">82</span> dd <span class="number">4</span>c <span class="number">96</span> <span class="number">4</span>f <span class="number">23</span> <span class="number">80</span> <span class="number">39</span> <span class="number">2</span>e <span class="number">31</span> b0 cf <span class="number">67</span> <span class="number">8</span>e <span class="number">63</span> b2 <span class="number">5</span>e f9 <span class="number">77</span> <span class="number">32</span> <span class="number">44</span> <span class="number">05</span> <span class="number">8</span>e <span class="number">22</span> f9 <span class="number">0</span>c <span class="number">69</span> <span class="number">32</span> <span class="number">64</span> <span class="number">1</span>b b8 <span class="number">2</span>d a0 <span class="number">99</span> <span class="number">0</span>e b8 <span class="number">0</span>e <span class="number">2</span>c <span class="number">10</span> b6 ff <span class="number">6</span>d <span class="number">5</span>f <span class="number">11</span> c9 <span class="number">5</span>e <span class="number">46</span> eb <span class="number">62</span> df <span class="number">00</span> <span class="number">7</span>a bd c6 <span class="number">7</span>b <span class="number">83</span> db <span class="number">0</span>f <span class="number">58</span> ed <span class="built_in">ac</span> a3 <span class="number">66</span> dd c2 ec df <span class="number">9</span>f <span class="number">22</span> b3 <span class="number">34</span> <span class="number">0</span>d <span class="number">07</span> <span class="number">89</span> ea <span class="number">3</span>b <span class="number">2</span>b b1 e1 f9 e2 e5 <span class="number">85</span> <span class="built_in">cd</span> a3 <span class="number">78</span> ae dd e3 <span class="number">98</span> <span class="number">78</span> <span class="number">39</span> <span class="number">8</span>e <span class="number">4</span>f <span class="number">49</span> <span class="number">5</span>a b6 <span class="number">05</span> <span class="number">4</span>c <span class="number">6</span>d <span class="number">1</span>a e6 fa <span class="number">30</span> c7 c6 fb <span class="number">4</span>d dc b4 ca f6 <span class="number">3</span>c <span class="number">20</span> fe <span class="number">70</span> eb e3 <span class="number">16</span> <span class="number">82</span> <span class="number">78</span> f8 <span class="number">49</span> <span class="number">8</span>d <span class="number">15</span> <span class="number">6</span>a <span class="number">15</span> <span class="number">10</span> <span class="built_in">ac</span> d8 <span class="number">68</span> f8 ef ad <span class="number">0</span>c c2 <span class="number">39</span> f2 ca <span class="number">80</span> ef <span class="number">96</span> </span><br><span class="line">	ssp :	KO</span><br><span class="line">	credman :	</span><br><span class="line"></span><br><span class="line">Authentication Id : <span class="number">0</span> ; <span class="number">46127</span> (<span class="number">00000000</span>:<span class="number">0000</span>b42f)</span><br><span class="line">Session           : UndefinedLogonType from <span class="number">0</span></span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : <span class="number">2022</span>/<span class="number">4</span>/<span class="number">15</span> <span class="number">22</span>:<span class="number">22</span>:<span class="number">21</span></span><br><span class="line">SID               : </span><br><span class="line">	msv :	</span><br><span class="line">	 [<span class="number">00000003</span>] Primary</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * NTLM     : <span class="number">416</span>f89c3a5deb1d398a1a1fce93862a7</span><br><span class="line">	 * SHA1     : <span class="number">54896</span>b6f5e60e9be2b46332b13d0e0f110d6518f</span><br><span class="line">	tspkg :	</span><br><span class="line">	wdigest :	</span><br><span class="line">	kerberos :	</span><br><span class="line">	ssp :	KO</span><br><span class="line">	credman :	</span><br><span class="line"></span><br><span class="line">Authentication Id : <span class="number">0</span> ; <span class="number">999</span> (<span class="number">00000000</span>:<span class="number">000003</span>e7)</span><br><span class="line">Session           : UndefinedLogonType from <span class="number">0</span></span><br><span class="line">User Name         : PDC<span class="variable">$</span></span><br><span class="line">Domain            : TEST</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : <span class="number">2022</span>/<span class="number">4</span>/<span class="number">15</span> <span class="number">22</span>:<span class="number">22</span>:<span class="number">21</span></span><br><span class="line">SID               : S<span class="literal">-1-5-18</span></span><br><span class="line">	msv :	</span><br><span class="line">	tspkg :	</span><br><span class="line">	wdigest :	</span><br><span class="line">	 * Username : PDC<span class="variable">$</span></span><br><span class="line">	 * Domain   : TEST</span><br><span class="line">	 * Password : (null)</span><br><span class="line">	kerberos :	</span><br><span class="line">	 * Username : pdc<span class="variable">$</span></span><br><span class="line">	 * Domain   : TEST.LOCAL</span><br><span class="line">	 * Password : (null)</span><br><span class="line">	ssp :	KO</span><br><span class="line">	credman :	</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># exit</span></span><br><span class="line">Bye!</span><br></pre></td></tr></table></figure></div>

<p>得到哈希值：416f89c3a5deb1d398a1a1fce93862a7</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>解密神器-Ciphey使用教程</title>
    <url>/2024/09/28/%E8%A7%A3%E5%AF%86%E7%A5%9E%E5%99%A8-Ciphey%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1，ciphey安装-Windows版"><a href="#1，ciphey安装-Windows版" class="headerlink" title="1，ciphey安装(Windows版)"></a>1，<strong>ciphey安装</strong>(Windows版)</h1><p><strong>前提：</strong></p>
<ul>
<li>python3.8（3.7也可以，亲测其他版本安装会报错）</li>
<li>pip必须在python3以上</li>
</ul>
<p><strong>安装：</strong></p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">python <span class="literal">-m</span> pip install ciphey <span class="literal">-i</span> https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure></div>

<p>然后我们找到这个路径，编辑这个文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928125722437.png"
                      alt="image-20240928125722437"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928125804229.png"
                      alt="image-20240928125804229"
                ></p>
<p>在终端中输入ciphey测试一下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928125848532.png"
                      alt="image-20240928125848532"
                ></p>
<p>安装成功！</p>
<h1 id="2，使用参数"><a href="#2，使用参数" class="headerlink" title="2，使用参数"></a>2，使用参数</h1><div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">ciphey <span class="literal">--help</span></span><br><span class="line">用法: ciphey [选项] [<span class="type">TEXT_STDIN</span>]</span><br><span class="line"> </span><br><span class="line">  Ciphey - 自动解密工具</span><br><span class="line"> </span><br><span class="line">  文档地址: https://github.com/Ciphey/Ciphey/wiki</span><br><span class="line"> </span><br><span class="line">  Discord (这里支持，我们大部分时间都在线):</span><br><span class="line">  https://discord.ciphey.online/</span><br><span class="line"> </span><br><span class="line">  GitHub: https://github.com/ciphey/ciphey</span><br><span class="line"> </span><br><span class="line"> cipher是一种使用智能人工智能的自动解密工具</span><br><span class="line">和自然语言处理。输入加密文本，获取解密文本</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">例如:</span><br><span class="line">	基本用法: ciphey <span class="literal">-t</span> <span class="string">&quot;aGVsbG8gbXkgbmFtZSBpcyBiZWU=&quot;</span></span><br><span class="line"> </span><br><span class="line">选项:</span><br><span class="line">  <span class="literal">-t</span>, <span class="literal">--text</span> TEXT            您想要解密的密文。</span><br><span class="line">  <span class="literal">-q</span>, <span class="literal">--quiet</span>                减少冗长的显示,直接给结果</span><br><span class="line">  <span class="literal">-g</span>, <span class="literal">--greppable</span>            只输出答案(对于grep很有用)</span><br><span class="line">  <span class="literal">-v</span>, <span class="literal">--verbose</span></span><br><span class="line">  <span class="literal">-C</span>, <span class="literal">--checker</span> TEXT         使用给定的检查器</span><br><span class="line">  <span class="literal">-c</span>, <span class="literal">--config</span> TEXT          使用给定的配置文件。默认为</span><br><span class="line">                             appdirs.user_config_dir(<span class="string">&#x27;ciphey&#x27;</span>,</span><br><span class="line">                             <span class="string">&#x27;ciphey&#x27;</span>)/<span class="string">&#x27;config.yml&#x27;</span></span><br><span class="line"> </span><br><span class="line">  <span class="literal">-w</span>, <span class="literal">--wordlist</span> TEXT        使用给定的密码字典</span><br><span class="line">  <span class="literal">-p</span>, <span class="literal">--param</span> TEXT           将参数传递给语言检查器</span><br><span class="line">  <span class="literal">-l</span>, <span class="literal">--list-params</span> BOOLEAN  列出所选模块的参数</span><br><span class="line">  <span class="literal">--searcher</span> TEXT            选择要使用的搜索算法</span><br><span class="line">  <span class="literal">-b</span>, <span class="literal">--bytes</span>                强制密码使用二进制模式作为输入</span><br><span class="line">  <span class="literal">--default-dist</span> TEXT        设置默认的字符/字节分布</span><br><span class="line">  <span class="literal">-m</span>, <span class="literal">--module</span> PATH          从给定路径添加模块</span><br><span class="line">  <span class="literal">-A</span>, <span class="literal">--appdirs</span>              输出密码到想要的文件位置</span><br><span class="line"> </span><br><span class="line">  <span class="operator">-f</span>, <span class="literal">--file</span> FILENAME</span><br><span class="line">  <span class="literal">--help</span>                     显示此帮助消息并退出。</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>CTF教程分享</category>
      </categories>
  </entry>
  <entry>
    <title>隐写-Wbs43open使用教程</title>
    <url>/2024/09/25/%E9%9A%90%E5%86%99-Wbs43open%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1，简介"><a href="#1，简介" class="headerlink" title="1，简介"></a>1，简介</h1><p>wbs43open是一个隐写神器，支持Windows+Linux平台，可以将“秘密文件”隐藏进BMP、 TXT、 HTM 和 PDF中</p>
<h1 id="2，安装"><a href="#2，安装" class="headerlink" title="2，安装"></a>2，安装</h1><p>下载链接：<a class="link"   href="https://wbstego.wbailer.com/" >https://wbstego.wbailer.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925210024956.png"
                      alt="image-20240925210024956"
                ></p>
<h1 id="3，原理"><a href="#3，原理" class="headerlink" title="3，原理"></a>3，原理</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925210128262.png"
                      alt="image-20240925210128262"
                ></p>
<h1 id="4，用法"><a href="#4，用法" class="headerlink" title="4，用法"></a>4，用法</h1><p>首先点continue</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925220330209.png"
                      alt="image-20240925220330209"
                ></p>
<p>如果想加密，就选encode；解密就选decode。然后continue</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925220408474.png"
                      alt="image-20240925220408474"
                ></p>
<p>以decode为例</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240925220545035.png"
                      alt="image-20240925220545035"
                ></p>
<p>continue</p>
]]></content>
      <categories>
        <category>CTF教程分享</category>
      </categories>
  </entry>
  <entry>
    <title>鹤城杯2021 A_MISC</title>
    <url>/2024/09/24/%E9%B9%A4%E5%9F%8E%E6%9D%AF2021%20A_MISC/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924165930083.png"
                      alt="image-20240924165930083"
                ></p>
<p>附件是一个加密的压缩包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924170010613.png"
                      alt="image-20240924170010613"
                ></p>
<p>拖进随波逐流看一看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924170211965.png"
                      alt="image-20240924170211965"
                ></p>
<p>试了一下不是伪加密</p>
<p>我们试试密码爆破，密码为qwer</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924170439100.png"
                      alt="image-20240924170439100"
                ></p>
<p>把加密压缩包解密，得到了一个图片。</p>
<p>我们再把图片拖进随波逐流，得到了这个：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924170615384.png"
                      alt="image-20240924170615384"
                ></p>
<p><a class="link"   href="https://pan.baidu.com/s/1cG2QvYy3khpQGLfjfbYevg%EF%BC%8C%E9%99%84%E4%BB%B6%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B5%81%E9%87%8F%E5%8C%85" >https://pan.baidu.com/s/1cG2QvYy3khpQGLfjfbYevg，附件是一个流量包 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924170854737.png"
                      alt="image-20240924170854737"
                ></p>
<p>一把梭flag{cd2c3e2fea463ded9af800d7155be7aq}</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240924171131923.png"
                      alt="image-20240924171131923"
                ></p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>鹏城杯2022 Misc_water</title>
    <url>/2024/09/28/%E9%B9%8F%E5%9F%8E%E6%9D%AF2022%20Misc_water/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928233528160.png"
                      alt="image-20240928233528160"
                ></p>
<p>附件是一个压缩包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928233546270.png"
                      alt="image-20240928233546270"
                ></p>
<p>这里先说几个常见的文件头、文件尾：</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">1, jpg</span><br><span class="line">文件头：FFD8FF</span><br><span class="line">文件尾：FFD9</span><br><span class="line">2, png</span><br><span class="line">文件头：89504E47</span><br><span class="line">文件尾：AE 42 60 82</span><br></pre></td></tr></table></figure></div>

<p>我们用010打开这个.png图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928233836140.png"
                      alt="image-20240928233836140"
                ></p>
<p>搜索一下PNG的文件头89504E47，发现有两个搜索结果，也就是说，这里面至少有两个PNG图片（万一还有PNG，只不过是倒着写入的呢？）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928233919014.png"
                      alt="image-20240928233919014"
                ></p>
<p>我们先把已知的这两张PNG导出来：（导出后记得把PNG的十六进制数据删掉）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928234047413.png"
                      alt="image-20240928234047413"
                ></p>
<p>导出后还有一些数据，拉到最底处，发现是个倒写的jpg，这里我们暂且给它命名为：reverse_jpg</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928234313257.png"
                      alt="image-20240928234313257"
                ></p>
<p>倒写脚本附上：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;reverse_jpg&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;result.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        content = f1.read()</span><br><span class="line">        reverse_content = content[::-<span class="number">1</span>]</span><br><span class="line">        f2.write(reverse_content)</span><br></pre></td></tr></table></figure></div>

<p>这个就是得到的result.jpg</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928234416274.png"
                      alt="image-20240928234416274"
                ></p>
<p>既然题目是Misc_Water，猜测应该跟水印有关，接下来我们使用盲水印工具</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928234549310.png"
                      alt="image-20240928234549310"
                ></p>
<p>大致能看出来压缩包的密码：ZC4#QaWbW</p>
<p>然后我们拿着这个密码去解压show.zip</p>
<p>解压后有个图片，但打不开，盲猜是宽高有问题</p>
<p>我们拖进随波逐流一把梭：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928235349718.png"
                      alt="image-20240928235349718"
                ></p>
<p>果真是宽高有问题！</p>
<p>我们使用风二西大人的工具还原</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20240928235609494.png"
                      alt="image-20240928235609494"
                ></p>
<p>完事了NSSCTF{f0b31d6f9abc59f34815678c31d79178}</p>
]]></content>
      <categories>
        <category>CTF复现</category>
        <category>Misc</category>
      </categories>
  </entry>
</search>
