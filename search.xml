<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言-位域</title>
    <url>/2024/11/12/C%E8%AF%AD%E8%A8%80-%E4%BD%8D%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h1><p>在 C 语言中，<strong>位域</strong>（Bit Fields）是一种<strong>结构体成员</strong>，用于精确控制数据在内存中的位数，通常用于节省存储空间或直接操作位级数据。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>位域定义在结构体中，可以指定每个成员占用的<strong>比特位数</strong>。例如：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a : <span class="number">3</span>; <span class="comment">// a 占用 3 位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b : <span class="number">5</span>; <span class="comment">// b 占用 5 位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> c : <span class="number">1</span>; <span class="comment">// c 占用 1 位</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>在上面的例子中：</p>
<ul>
<li><code>a</code> 占 3 位，可以表示的值范围是 0 到 7（2的3次方，下面的例子依此类推）</li>
<li><code>b</code> 占 5 位，可以表示的值范围是 0 到 31（2的5次方）</li>
<li><code>c</code> 占 1 位，可以表示的值范围是 0 或 1（2的1次方）</li>
</ul>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><strong>节省内存</strong>：相比普通整型，位域只用<strong>指定的位数</strong>来存储，<strong>避免浪费空间</strong>。</p>
<p><strong>操作硬件寄存器</strong>：位域允许直接访问和修改某些位，非常适合底层硬件开发。</p>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flags</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flag1 : <span class="number">1</span>; <span class="comment">// 占 1 位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flag2 : <span class="number">1</span>; <span class="comment">// 占 1 位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> mode : <span class="number">3</span>;  <span class="comment">// 占 3 位</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Flags</span> <span class="title">f</span> =</span> &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>&#125;; <span class="comment">// 初始化位域</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag1: %u, flag2: %u, mode: %u\n&quot;</span>, f.flag1, f.flag2, f.mode);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-getchar()函数</title>
    <url>/2024/11/12/C%E8%AF%AD%E8%A8%80-getchar()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p><code>getchar()</code> 函数是 C 标准库中的一个简单输入函数，用于从标准输入（通常是键盘）读取<strong>一个字符</strong>。</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getchar</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<p><code>getchar()</code> 函数<strong>没有参数</strong>，它从标准输入中<strong>读取一个字符并返回该字符的 ASCII 值（整数类型）</strong>。如果读取失败（例如遇到文件结束符 <code>EOF</code>），它会返回 <code>EOF</code>。</p>
<p>（ps：当输入流（例如文件、标准输入）到达末尾时，<code>getchar()</code> 会返回 <code>EOF</code>，表示没有更多的数据可以读取。对于标准输入，用户可以通过按 <code>Ctrl+D</code>（在 Linux 和 macOS 上）或 <code>Ctrl+Z</code>（在 Windows 上）来手动发送 <code>EOF</code>。）</p>
<h3 id="基本用法示例"><a href="#基本用法示例" class="headerlink" title="基本用法示例"></a>基本用法示例</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter a character: &quot;</span>);</span><br><span class="line">    ch = getchar(); <span class="comment">// 读取输入的第一个字符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You entered: %c\n&quot;</span>, ch);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个例子中，程序会等待用户输入一个字符并按下回车键。<code>getchar()</code> 将读取输入的<strong>第一个字符</strong>，存入变量 <code>ch</code> 中并输出。</p>
<h3 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h3><ol>
<li><p><strong>逐字符读取输入</strong>：<code>getchar()</code> 经常用于逐字符读取用户输入，特别是当我们不需要一次性读取一整行时。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">ch = getchar(); <span class="comment">// 读取一个字符，比如输入hello时，只读取h</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You entered: %c\n&quot;</span>, ch);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">单独调用：只读取一个字符，即输入缓冲区的第一个字符，然后不再继续读取。因此，在你输入 hello world 时，ch = getchar(); 只会读取并返回第一个字符 h。后续字符 e, l, l, o, 等还留在输入缓冲区中。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>逐行读取</strong>：通过循环 <code>getchar()</code> 读取字符，直到遇到换行符（<code>\n</code>）或文件结束符（<code>EOF</code>）。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (  (demo = getchar()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; (demo = getchar()) != EOF  ) <span class="comment">// 可以读取所有输入（回车除外）</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">putchar</span>(demo); <span class="comment">// 输出每个字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">循环调用：在这种情况下，getchar() 被反复调用。每次循环中，getchar() 会从输入缓冲区中读取下一个字符，直到遇到换行符 \n（回车）或 EOF 才停止。这就使得整个输入（如 hello world）被逐个字符地读取并处理。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="示例：读取一行字符"><a href="#示例：读取一行字符" class="headerlink" title="示例：读取一行字符"></a>示例：读取一行字符</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a line of text (press Enter to finish):\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (  (ch = getchar()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; (ch = getchar()) != EOF  ) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch); <span class="comment">// 输出每个字符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nEnd of input.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个例子中：</p>
<ul>
<li><code>getchar()</code> 逐个读取字符并将其输出，直到遇到换行符或 <code>EOF</code>。</li>
<li><code>putchar(ch);</code> 将读取的字符逐个输出到屏幕上。</li>
</ul>
<h3 id="getchar-与scanf-的区别"><a href="#getchar-与scanf-的区别" class="headerlink" title="getchar()与scanf()的区别"></a>getchar()与scanf()的区别</h3><h5 id="1-功能和用途"><a href="#1-功能和用途" class="headerlink" title="1. 功能和用途"></a>1. <strong>功能和用途</strong></h5><ul>
<li>**<code>getchar()</code>**：用于从标准输入（通常是键盘）读取一个字符。每次调用 <code>getchar()</code>，它会读取输入流中的下一个字符，包括空格、换行符等。</li>
<li>**<code>scanf()</code>**：用于从标准输入读取格式化的数据。它根据提供的格式控制符（如 <code>%d</code>, <code>%s</code>, <code>%f</code> 等）来读取不同类型的数据，并将结果存储到指定的变量中。</li>
</ul>
<h5 id="2-读取的内容"><a href="#2-读取的内容" class="headerlink" title="2. 读取的内容"></a>2. <strong>读取的内容</strong></h5><ul>
<li>**<code>getchar()</code>**：每次读取一个字符，返回该字符的 ASCII 值。如果读取失败（如遇到文件结束符 <code>EOF</code>），则返回 <code>EOF</code>。</li>
<li><strong><code>scanf()</code><strong>：读取一个或多个格式化的值。它会根据格式控制符来确定读取的数据类型，并将结果存储到相应的变量中。<code>scanf()</code> 会</strong>跳过输入中的空白字符</strong>（空格、制表符、换行符等），直到遇到下一个有效的输入。</li>
</ul>
<h5 id="3-格式化输入"><a href="#3-格式化输入" class="headerlink" title="3. 格式化输入"></a>3. <strong>格式化输入</strong></h5><ul>
<li><strong><code>getchar()</code><strong>：</strong>没有格式控制</strong>。它始终从标准输入流中读取下一个字符，不管是什么字符（包括空格、换行符等）。</li>
<li><strong><code>scanf()</code><strong>：</strong>支持格式化输入</strong>。你可以通过格式控制符（如 <code>%d</code>, <code>%f</code>, <code>%s</code>）来指定输入的类型和格式。</li>
</ul>
<h5 id="4-返回值"><a href="#4-返回值" class="headerlink" title="4. 返回值"></a>4. <strong>返回值</strong></h5><ul>
<li>**<code>getchar()</code>**：返回一个整数，表示读取的字符的 ASCII 值。如果读取失败（如遇到文件结束符 <code>EOF</code>），它会返回 <code>EOF</code>。</li>
<li>**<code>scanf()</code>**：返回成功读取的项数，表示有多少个输入项被成功赋值。如果遇到输入错误或输入结束，返回的数字可能会小于预期。</li>
</ul>
<h5 id="5-跳过空白字符"><a href="#5-跳过空白字符" class="headerlink" title="5. 跳过空白字符"></a>5. <strong>跳过空白字符</strong></h5><ul>
<li>**<code>getchar()</code>**：不会自动跳过空白字符。每次调用都会读取下一个字符，包括空格、换行符等。</li>
<li>**<code>scanf()</code>**：会自动跳过空白字符（空格、制表符、换行符等），直到遇到符合格式的有效输入。</li>
</ul>
<h5 id="6-输入结束"><a href="#6-输入结束" class="headerlink" title="6. 输入结束"></a>6. <strong>输入结束</strong></h5><ul>
<li>**<code>getchar()</code>**：<code>getchar()</code> 在遇到文件结束符 <code>EOF</code> 时停止读取。如果从终端输入，通常按 <code>Ctrl+D</code>（Linux&#x2F;macOS）或 <code>Ctrl+Z</code>（Windows）来结束输入并返回 <code>EOF</code>。</li>
<li>**<code>scanf()</code>**：<code>scanf()</code> 读取输入直到满足格式要求或遇到 <code>EOF</code>，它的行为也依赖于输入的格式。如果输入不符合格式，<code>scanf()</code> 可能会停止或返回错误。</li>
</ul>
<h5 id="7-例子"><a href="#7-例子" class="headerlink" title="7. 例子"></a>7. <strong>例子</strong></h5><h6 id="getchar-示例："><a href="#getchar-示例：" class="headerlink" title="getchar() 示例："></a><code>getchar()</code> 示例：</h6><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a character: &quot;</span>);</span><br><span class="line">    ch = getchar();  <span class="comment">// 读取一个字符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You entered: %c\n&quot;</span>, ch);  <span class="comment">// 输出字符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>解释：</strong> <code>getchar()</code> 只读取一个字符。</p>
<h6 id="scanf-示例："><a href="#scanf-示例：" class="headerlink" title="scanf() 示例："></a><code>scanf()</code> 示例：</h6><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> letter;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a number and a character: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>, &amp;num, &amp;letter);  <span class="comment">// 读取一个整数和一个字符</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You entered: %d and %c\n&quot;</span>, num, letter);  <span class="comment">// 输出读取的整数和字符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>解释：</strong> <code>scanf()</code> 根据格式控制符 <code>%d</code> 和 <code>%c</code> 读取一个整数和一个字符，并将它们存储在 <code>num</code> 和 <code>letter</code> 中。</p>
<h5 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. <strong>总结</strong></h5><table>
<thead>
<tr>
<th>特性</th>
<th><code>getchar()</code></th>
<th><code>scanf()</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong>功能</strong></td>
<td>从标准输入读取一个字符</td>
<td>从标准输入读取格式化的数据</td>
</tr>
<tr>
<td><strong>读取内容</strong></td>
<td>每次读取一个字符，包括空格和换行符</td>
<td>读取多个符合格式的数据项</td>
</tr>
<tr>
<td><strong>格式化输入</strong></td>
<td>无格式化输入</td>
<td>支持格式化输入，根据格式符读取不同类型的数据</td>
</tr>
<tr>
<td><strong>返回值</strong></td>
<td>返回字符的 ASCII 值或 <code>EOF</code></td>
<td>返回成功读取的项数</td>
</tr>
<tr>
<td><strong>跳过空白字符</strong></td>
<td>不跳过空白字符</td>
<td>自动跳过空白字符（空格、换行符、制表符等）</td>
</tr>
<tr>
<td><strong>输入结束</strong></td>
<td>遇到 <code>EOF</code> 停止</td>
<td>遇到错误输入或 <code>EOF</code> 停止</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-存储类</title>
    <url>/2024/10/17/C%E8%AF%AD%E8%A8%80-%E5%AD%98%E5%82%A8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="auto-存储类"><a href="#auto-存储类" class="headerlink" title="auto 存储类"></a>auto 存储类</h2><p><strong>auto</strong> 存储类是所有局部变量默认的存储类。</p>
<p>定义在函数中的变量默认为 auto 存储类，这意味着它们在函数开始时被创建，在函数结束时被销毁。</p>
<h2 id="register-存储类"><a href="#register-存储类" class="headerlink" title="register 存储类"></a>register 存储类</h2><p><strong>register</strong> 存储类用于定义<strong>存储在寄存器</strong>中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个字），且不能对它应用一元的 ‘&amp;’ 运算符（因为<strong>它没有内存位置</strong>）。</p>
<p>register 存储类定义存储在寄存器，所以变量的访问速度更快，但是<strong>它不能直接取地址，因为它不是存储在 RAM 中</strong>的。在需要频繁访问的变量上使用 register 存储类可以提高程序的运行速度。寄存器只用于<strong>需要快速访问的变量，比如计数器</strong>。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p>
<h2 id="static-存储类"><a href="#static-存储类" class="headerlink" title="static 存储类"></a>static 存储类</h2><p><strong>static</strong> 存储类指示编译器在<strong>程序</strong>的<strong>生命周期内保持局部变量的存在</strong>，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 <strong>static 修饰局部变量</strong>可以在函数调用之间<strong>保持局部变量的值</strong>。</p>
<p><strong>static 修饰符也可以应用于全局变量</strong>。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>
<p>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。</p>
<p><strong>静态变量在程序中只被初始化一次</strong>，即使函数被调用多次，该变量的值也不会重置。</p>
<h2 id="extern-存储类"><a href="#extern-存储类" class="headerlink" title="extern 存储类"></a>extern 存储类</h2><p><strong>extern</strong> 存储类<strong>用于定义在其他文件中声明的全局变量或函数</strong>。当使用 extern 关键字时，不会为变量分配任何存储空间，而只是指示编译器该变量在其他文件中定义。</p>
<p><strong>extern</strong> 存储类用于提供一个<strong>全局变量</strong>的引用，全局变量对所有的程序文件都是可见的。当您使用 <strong>extern</strong> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>
<p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-基础语法</title>
    <url>/2024/10/16/C%E8%AF%AD%E8%A8%80-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi 3.1415926 <span class="comment">// 宏定义，虽然未使用</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>; <span class="comment">// 函数声明，具体函数在main函数后</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;welcome to learn C!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num1, num2, num3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input two numbers\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;num1, &amp;num2); <span class="comment">//输入两个整数时记得用“空格”相隔</span></span><br><span class="line"></span><br><span class="line">    num3 = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the third number is:%d\n&quot;</span>, num3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2) <span class="comment">//比较大小</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num1 is greater than num2\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num1 is less than num2\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num1 is equal to num2\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;adding num1 and num2...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result:%d\n&quot;</span>, add(num1, num2)); <span class="comment">//调用add函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">它可以跨越多行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标识符是程序中变量、函数、数组等的名字。标识符由字母（大写或小写）、数字和下划线组成，但第一个字符必须是字母或下划线，不能是数字。</span></span><br><span class="line"><span class="comment">标识符区分大小写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">C语言中的字符串字面量是由双引号括起来的字符序列，例如：&quot;Hello, World!&quot;。</span></span><br><span class="line"><span class="comment">在C语言中，字符串字面量实际上是字符数组，以空字符&#x27;\0&#x27;结尾。</span></span><br><span class="line"><span class="comment">例如，字符串&quot;Hello, World!&quot;实际上包含13个字符（包括空格和标点符号），加上一个空字符&#x27;\0&#x27;，共14个字符。</span></span><br><span class="line"><span class="comment">char string[]=&quot;welcome to learn c!&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-文件读写</title>
    <url>/2024/11/13/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
    <content><![CDATA[<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">#打开文件</span><br><span class="line">FILE *<span class="title function_">fopen</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode )</span>;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">#写入文件</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;/tmp/test.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">    </span><br><span class="line">   <span class="built_in">fputs</span>(<span class="string">&quot;This is testing for fputs...\n&quot;</span>, fp);</span><br><span class="line">   fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">#读取文件</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="type">char</span> buff[<span class="number">255</span>];</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;/tmp/test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   fgets(buff, <span class="number">255</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buff );</span><br><span class="line">   fclose(fp);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里，<strong>filename</strong> 是字符串，用来命名文件，访问模式 <strong>mode</strong> 的值可以是下列值中的一个：</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">r</td>
<td align="left">打开一个已有的文本文件，允许读取文件。</td>
</tr>
<tr>
<td align="left">w</td>
<td align="left">打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td>
</tr>
<tr>
<td align="left">a</td>
<td align="left">打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td>
</tr>
<tr>
<td align="left">r+</td>
<td align="left">打开一个文本文件，允许读写文件。</td>
</tr>
<tr>
<td align="left">w+</td>
<td align="left">打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td>
</tr>
<tr>
<td align="left">a+</td>
<td align="left">打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td>
</tr>
</tbody></table>
<p>如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;rb&quot;</span>, <span class="string">&quot;wb&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;rb+&quot;</span>, <span class="string">&quot;r+b&quot;</span>, <span class="string">&quot;wb+&quot;</span>, <span class="string">&quot;w+b&quot;</span>, <span class="string">&quot;ab+&quot;</span>, <span class="string">&quot;a+b&quot;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-冒泡排序法</title>
    <url>/2024/12/05/C%E8%AF%AD%E8%A8%80-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%B3%95/</url>
    <content><![CDATA[<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123; <span class="number">22</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span> &#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);  <span class="comment">// 计算数组长度</span></span><br><span class="line"> </span><br><span class="line">    bubble_sort(arr, len);  <span class="comment">// 调用冒泡排序函数</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 打印排序后的数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 冒泡排序函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="comment">// 交换元素位置</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-递归函数的应用</title>
    <url>/2024/11/23/C%E8%AF%AD%E8%A8%80-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="数的阶乘"><a href="#数的阶乘" class="headerlink" title="数的阶乘"></a>数的阶乘</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="title function_">factorial</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( n==<span class="number">0</span> || n==<span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input a number n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">double</span> result = factorial(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the result is: %lf\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">fibonaci</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> fibonaci(i<span class="number">-1</span>) + fibonaci(i<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\t\n&quot;</span>, fibonaci(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-枚举</title>
    <url>/2024/11/18/C%E8%AF%AD%E8%A8%80-%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Number</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    zero=<span class="number">0</span>, one, two, three, four, five, six, seven, eight, nine, ten</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Number</span> <span class="title">number</span>;</span></span><br><span class="line">    number = one;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the number is %d:\n&quot;</span>,number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Number</span> <span class="title">number</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input a number!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>, &amp;number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the number is %d:\n&quot;</span>,number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    fun1();</span><br><span class="line">    fun2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-预处理器</title>
    <url>/2024/11/13/C%E8%AF%AD%E8%A8%80-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h2 id="预处理器实例"><a href="#预处理器实例" class="headerlink" title="预处理器实例"></a>预处理器实例</h2><p>分析下面的实例来理解不同的指令。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ARRAY_LENGTH 20</span></span><br></pre></td></tr></table></figure></div>

<p>这个指令告诉 CPP 把所有的 MAX_ARRAY_LENGTH 定义为 20。使用 <em>#define</em> 定义常量来增强可读性。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myheader.h&quot;</span></span></span><br></pre></td></tr></table></figure></div>

<p>这些指令告诉 CPP 从<strong>系统库</strong>中获取 stdio.h，并添加文本到当前的源文件中。下一行告诉 CPP 从本地目录中获取 <strong>myheader.h</strong>，并添加内容到当前的源文件中。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">undef</span>  FILE_SIZE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_SIZE 42</span></span><br></pre></td></tr></table></figure></div>

<p>这个指令告诉 CPP 取消已定义的 FILE_SIZE，并定义它为 42。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MESSAGE</span></span><br><span class="line">   <span class="meta">#<span class="keyword">define</span> MESSAGE <span class="string">&quot;You wish!&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p>这个指令告诉 CPP 只有当 MESSAGE 未定义时，才定义 MESSAGE。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-错误处理代码实例</title>
    <url>/2024/11/13/C%E8%AF%AD%E8%A8%80-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SUCCESS = <span class="number">0</span>,</span><br><span class="line">    ERROR_FILE_NOT_FOUND,</span><br><span class="line">    ERROR_INVALID_ARGUMENT,</span><br><span class="line">    ERROR_UNKNOWN</span><br><span class="line">&#125; ErrorCode;</span><br><span class="line"></span><br><span class="line">ErrorCode <span class="title function_">OpenFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename)</span></span><br><span class="line">&#123;</span><br><span class="line">    errno = <span class="number">0</span>; </span><br><span class="line">    FILE *file = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> ERROR_FILE_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    ErrorCode result = OpenFile(<span class="string">&quot;file_not_exist.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (result != SUCCESS)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error code: %d\n&quot;</span>, result);</span><br><span class="line">        <span class="keyword">switch</span> (result) <span class="comment">//这里switch无意义，只是为了演示</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> ERROR_FILE_NOT_FOUND:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;File not found.\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ERROR_INVALID_ARGUMENT:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Invalid argument.\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ERROR_UNKNOWN:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Unknown error.\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;An unexpected error occurred.\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>Linux系统启动流程</title>
    <url>/2025/03/20/Linux%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>Linux系统的启动分为五个流程：</strong></p>
<ol>
<li><strong>内核引导</strong></li>
<li><strong>运行init</strong></li>
<li><strong>系统初始化</strong></li>
<li><strong>建立终端</strong></li>
<li><strong>用户登录</strong></li>
</ol>
<h2 id="一，内核引导"><a href="#一，内核引导" class="headerlink" title="一，内核引导"></a>一，内核引导</h2><p>当计算机打开电源后，首先是<strong>BIOS开机自检</strong>，按照<strong>BIOS中设置的启动设备（通常是硬盘）</strong>来启动。</p>
<p>操作系统接管硬件以后，首先读入 <strong>&#x2F;boot</strong> 目录下的内核文件。</p>
<h2 id="二，运行init"><a href="#二，运行init" class="headerlink" title="二，运行init"></a>二，运行init</h2><p><strong>init 进程</strong>是系统<strong>所有进程的起点</strong>，你可以把它比拟成系统<strong>所有进程的老祖宗</strong>，没有这个进程，系统中任何进程都不会启动。</p>
<p><strong>init程序类型又分为以下三种：</strong></p>
<ul>
<li><p><strong>SysV:</strong> init, CentOS 5之前, 配置文件： &#x2F;etc&#x2F;inittab。</p>
</li>
<li><p><strong>Upstart:</strong> init, CentOS 6, 配置文件： &#x2F;etc&#x2F;inittab, &#x2F;etc&#x2F;init&#x2F;*.conf。</p>
</li>
<li><p><strong>Systemd：</strong> systemd, CentOS 7,配置文件： &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system、 &#x2F;etc&#x2F;systemd&#x2F;system。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081703.png"
                      alt="img"
                ></p>
</li>
</ul>
<hr>
<h3 id="1，如何验证自己系统的init程序类型？"><a href="#1，如何验证自己系统的init程序类型？" class="headerlink" title="1，如何验证自己系统的init程序类型？"></a>1，如何验证自己系统的init程序类型？</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ps -p 1 -o <span class="built_in">comm</span>=</span><br></pre></td></tr></table></figure></div>

<ul>
<li>若输出 <code>systemd</code>，则系统使用 systemd。</li>
<li>若输出 <code>init</code>，可能是 SysV init 或 Upstart（旧版本）。</li>
</ul>
<h3 id="2，运行级别"><a href="#2，运行级别" class="headerlink" title="2，运行级别"></a>2，运行级别</h3><p>许多程序需要开机启动。它们在<strong>Windows叫做”服务”（service）</strong>，在<strong>Linux就叫做”守护进程”（daemon）</strong>。</p>
<p>init进程的一大任务，就是去<strong>运行这些开机启动的程序</strong>。</p>
<p>但是，<strong>不同的场合需要启动不同的程序</strong>，比如用作服务器时，需要启动Apache，用作桌面就不需要。</p>
<p>Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，<strong>启动时根据”运行级别”，确定要运行哪些程序。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081704.png"
                      alt="img"
                ></p>
<table>
<thead>
<tr>
<th align="center">运行级别</th>
<th align="left">名称</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>0</strong></td>
<td align="left">关机模式</td>
<td align="left">关闭所有服务并安全关机（<code>init 0</code> 或 <code>poweroff</code>）。</td>
</tr>
<tr>
<td align="center"><strong>1</strong></td>
<td align="left">单用户模式</td>
<td align="left">救援模式，仅启动最小服务（无网络、多用户），用于系统修复（<code>init 1</code>）。</td>
</tr>
<tr>
<td align="center"><strong>2</strong></td>
<td align="left">多用户模式（无网络）</td>
<td align="left">支持多用户登录，但<strong>不启用网络服务</strong>（部分旧发行版使用，现已少见）。</td>
</tr>
<tr>
<td align="center"><strong>3</strong></td>
<td align="left">多用户文本模式</td>
<td align="left">完整的多用户模式，启用网络服务，但<strong>无图形界面</strong>（服务器常用）。</td>
</tr>
<tr>
<td align="center"><strong>4</strong></td>
<td align="left">未定义</td>
<td align="left">保留级别，默认与级别 3 相同，可自定义用途。</td>
</tr>
<tr>
<td align="center"><strong>5</strong></td>
<td align="left">图形界面模式</td>
<td align="left">与级别 3 类似，但<strong>启用图形界面</strong>（桌面版默认级别）。</td>
</tr>
<tr>
<td align="center"><strong>6</strong></td>
<td align="left">重启模式</td>
<td align="left">关闭所有服务并重启系统（<code>init 6</code> 或 <code>reboot</code>）。</td>
</tr>
</tbody></table>
<h3 id="3，查看系统默认的运行级别？"><a href="#3，查看系统默认的运行级别？" class="headerlink" title="3，查看系统默认的运行级别？"></a>3，查看系统默认的运行级别？</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl get-default</span><br></pre></td></tr></table></figure></div>

<h2 id="三，系统初始化"><a href="#三，系统初始化" class="headerlink" title="三，系统初始化"></a>三，系统初始化</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081705.png"
                      alt="img"
                ></p>
<h2 id="四，建立终端"><a href="#四，建立终端" class="headerlink" title="四，建立终端"></a>四，建立终端</h2><p>rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。</p>
<p>init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">1:2345:respawn:/sbin/mingetty tty1</span><br><span class="line">2:2345:respawn:/sbin/mingetty tty2</span><br><span class="line">3:2345:respawn:/sbin/mingetty tty3</span><br><span class="line">4:2345:respawn:/sbin/mingetty tty4</span><br><span class="line">5:2345:respawn:/sbin/mingetty tty5</span><br><span class="line">6:2345:respawn:/sbin/mingetty tty6</span><br></pre></td></tr></table></figure></div>

<p>从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。</p>
<p>同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。</p>
<h2 id="五，用户登录"><a href="#五，用户登录" class="headerlink" title="五，用户登录"></a>五，用户登录</h2><p>一般来说，用户的登录方式有三种：</p>
<ul>
<li>（1）命令行登录</li>
<li>（2）ssh登录</li>
<li>（3）图形界面登录</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081706.png"
                      alt="img"
                ></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Termux之SSH服务配置</title>
    <url>/2024/12/13/TermuxSSH%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>首先查看当前用户名</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/12/13/ihfe3joKCG872Bk.png"
                      alt="image.png"
                ></p>
<p>为当前用户设置密码（输入密码时不会显示你输入的密码）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/12/13/WoFk9yuwXvP1S3M.png"
                      alt="image.png"
                ></p>
<p>安装OpenSSH服务</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/12/13/VOAs8XR3JvtumlD.png"
                      alt="image.png"
                ></p>
<p>更改SSH端口（默认为8022，不修改也可以！）</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sshd -p 2222（此方法重启后失效）</span><br></pre></td></tr></table></figure></div>



<p>启动SSH服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sshd</span><br></pre></td></tr></table></figure></div>



<p>远程连接Termux</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh [用户名]@[IP地址] -p [端口号]</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>VSCode配置C/C++环境（Windows）</title>
    <url>/2024/10/16/VSCode%E9%85%8D%E7%BD%AEC%E5%92%8CC++%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p><strong>1，安装VSCode</strong></p>
<p>下载地址：<a class="link"   href="https://code.visualstudio.com/Download" >https://code.visualstudio.com/Download<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>选择对应的安装包，我的是Windows11</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/19/9uHrYciJNsQn8vp.png"
                      alt="image-20241016174212587.png"
                ></p>
<p>安装即可，安装目录最好是英文</p>
<p><strong>2，安装VSCode-C++插件</strong></p>
<p>安装完VSCode后，按ctrl+shift+x打开拓展商店，搜索C&#x2F;C++插件，并安装</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/19/IuEeKBqA3Ozs4tG.png"
                      alt="image-20241016174437717.png"
                ></p>
<p><strong>3，安装MinGW-w64</strong></p>
<p>下载地址： <a class="link"   href="https://sourceforge.net/projects/mingw-w64/postdownload" >https://sourceforge.net/projects/mingw-w64/postdownload<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>这是一些安装失败问题的解决方案：<a class="link"   href="https://blog.csdn.net/qq_39588304/article/details/101119903" >https://blog.csdn.net/qq_39588304/article/details/101119903<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>安装完之后，我们需要复制一下这个路径</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/19/74YakvgsMutpcF2.png"
                      alt="image-20241016175350821.png"
                ></p>
<p>这里我的是：D:\APP\mingw64\bin （根据你们的实际情况调整）</p>
<p>接下来编辑环境变量</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/19/yHwRze9KxI1FNbG.png"
                      alt="image-20241016175454131.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/19/keOGKS14UMg27t9.png"
                      alt="image-20241016175506770.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/19/h9Hp6lMCJaOFecX.png"
                      alt="image-20241016175542332.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/19/HSaX8BjG2wMWCgu.png"
                      alt="image-20241016175601633.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/19/IpRomKCNnl7QraZ.png"
                      alt="image-20241016175710241.png"
                ></p>
<p>接着重启一下电脑，在终端中输入：gcc -v，有回显则说明安装成功！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016180015206.png"
                      alt="image-20241016180015206"
                ></p>
<p><strong>4，编辑VSCode里的设置</strong></p>
<p>首先在VSCode中打开一个用来存放C++代码的文件夹（路径最好是英文）</p>
<p>如图，我已经打开过了（只不过里面还木有存放代码）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016180631650.png"
                      alt="image-20241016180631650"
                ></p>
<p>然后按ctrl+shift+p，并搜索C&#x2F;C++ Edit Configurations(UI)</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016180832501.png"
                      alt="image-20241016180832501"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016180928196.png"
                      alt="image-20241016180928196"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016181059294.png"
                      alt="image-20241016181059294"
                ></p>
<hr>
<p>接下来，我们先随便写一个C++代码，保存（一定要保存）</p>
<p>（运行会报错，我们不管它）</p>
<p>注意，demo.cpp可以保存在任意位置，但不要保存在.vscode里面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016181640121.png"
                      alt="image-20241016181640121"
                ></p>
<p>按ctrl+shift+p，搜索Tasks:Configure Default Build Task</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016181820113.png"
                      alt="image-20241016181820113"
                ></p>
<p>再选择：“C&#x2F;C++: g++.exe build active file”</p>
<p>这时，.vscode文件夹中会出现一个tasks.json文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016182051978.png"
                      alt="image-20241016182051978"
                ></p>
<p>回到测试代码界面，按如图所示操作：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016183021454.png"
                      alt="image-20241016183021454"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016183325240.png"
                      alt="image-20241016183325240"
                ></p>
<p>完事了，运行demo.exe即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241016183447884.png"
                      alt="image-20241016183447884"
                ></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>最新版Ubuntu安装MySQL教程</title>
    <url>/2024/11/16/%E6%9C%80%E6%96%B0%E7%89%88Ubuntu%E5%AE%89%E8%A3%85MySQL%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>进入命令行，使用下面的命令<strong>查看当前Ubuntu的版本：</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">root@1bf7034a513e:/# <span class="built_in">cat</span> /etc/os-release</span><br><span class="line">PRETTY_NAME=<span class="string">&quot;Ubuntu 24.04.1 LTS&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;24.04&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;24.04.1 LTS (Noble Numbat)&quot;</span></span><br><span class="line">VERSION_CODENAME=noble</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.ubuntu.com/&quot;</span></span><br><span class="line">SUPPORT_URL=<span class="string">&quot;https://help.ubuntu.com/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.launchpad.net/ubuntu/&quot;</span></span><br><span class="line">PRIVACY_POLICY_URL=<span class="string">&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span></span><br><span class="line">UBUNTU_CODENAME=noble</span><br><span class="line">LOGO=ubuntu-logo</span><br></pre></td></tr></table></figure></div>

<p>我的是24.04版本，版本比较新</p>
<p><strong>切换到root用户</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> su</span><br><span class="line"><span class="comment">#然后记得输入密码，密码在输入过程中不会显示</span></span><br></pre></td></tr></table></figure></div>



<p><strong>更新一下软件：</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">root@1bf7034a513e:/# apt update</span><br><span class="line">Get:1 http://security.ubuntu.com/ubuntu noble-security InRelease [126 kB]</span><br><span class="line">Get:2 http://archive.ubuntu.com/ubuntu noble InRelease [256 kB]</span><br><span class="line">Get:3 http://security.ubuntu.com/ubuntu noble-security/multiverse amd64 Packages [15.3 kB]</span><br><span class="line">Get:4 http://archive.ubuntu.com/ubuntu noble-updates InRelease [126 kB]</span><br><span class="line">Get:5 http://security.ubuntu.com/ubuntu noble-security/main amd64 Packages [586 kB]</span><br><span class="line">Get:6 http://archive.ubuntu.com/ubuntu noble-backports InRelease [126 kB]</span><br><span class="line">Get:7 http://security.ubuntu.com/ubuntu noble-security/universe amd64 Packages [725 kB]</span><br><span class="line">Get:8 http://archive.ubuntu.com/ubuntu noble/main amd64 Packages [1808 kB]    </span><br><span class="line">Get:9 http://security.ubuntu.com/ubuntu noble-security/restricted amd64 Packages [548 kB]</span><br><span class="line">Get:10 http://archive.ubuntu.com/ubuntu noble/universe amd64 Packages [19.3 MB]          </span><br><span class="line">Get:11 http://archive.ubuntu.com/ubuntu noble/restricted amd64 Packages [117 kB]                                                                          </span><br><span class="line">Get:12 http://archive.ubuntu.com/ubuntu noble/multiverse amd64 Packages [331 kB]                                                                          </span><br><span class="line">Get:13 http://archive.ubuntu.com/ubuntu noble-updates/multiverse amd64 Packages [18.4 kB]                                                                 </span><br><span class="line">Get:14 http://archive.ubuntu.com/ubuntu noble-updates/restricted amd64 Packages [548 kB]                                                                  </span><br><span class="line">Get:15 http://archive.ubuntu.com/ubuntu noble-updates/universe amd64 Packages [933 kB]                                                                    </span><br><span class="line">Get:16 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 Packages [812 kB]                                                                        </span><br><span class="line">Get:17 http://archive.ubuntu.com/ubuntu noble-backports/universe amd64 Packages [11.8 kB]                                                                 </span><br><span class="line">Fetched 26.4 MB <span class="keyword">in</span> 8s (3393 kB/s)                                                                                                                         </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">8 packages can be upgraded. Run <span class="string">&#x27;apt list --upgradable&#x27;</span> to see them.</span><br></pre></td></tr></table></figure></div>



<p><strong>搜索可以使用的安装包：</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">root@1bf7034a513e:/# apt search sql-server</span><br><span class="line">Sorting... Done</span><br><span class="line">Full Text Search... Done</span><br><span class="line">default-mysql-server/noble 1.1.0build1 all</span><br><span class="line">  MySQL database server binaries and system database setup (metapackage)</span><br><span class="line"></span><br><span class="line">default-mysql-server-core/noble 1.1.0build1 all</span><br><span class="line">  MySQL database server binaries (metapackage)</span><br><span class="line"></span><br><span class="line">mysql-server/noble-updates,noble-security 8.0.40-0ubuntu0.24.04.1 all</span><br><span class="line">  MySQL database server (metapackage depending on the latest version)</span><br><span class="line"></span><br><span class="line">mysql-server-8.0/noble-updates,noble-security 8.0.40-0ubuntu0.24.04.1 amd64</span><br><span class="line">  MySQL database server binaries and system database setup</span><br><span class="line"></span><br><span class="line">mysql-server-core-8.0/noble-updates,noble-security 8.0.40-0ubuntu0.24.04.1 amd64</span><br><span class="line">  MySQL database server binaries</span><br><span class="line"></span><br><span class="line">postgresql-server-dev-16/noble-updates 16.4-0ubuntu0.24.04.2 amd64</span><br><span class="line">  development files <span class="keyword">for</span> PostgreSQL 16 server-side programming</span><br><span class="line"></span><br><span class="line">postgresql-server-dev-all/noble-updates 257build1.1 amd64</span><br><span class="line">  extension build tool <span class="keyword">for</span> multiple PostgreSQL versions</span><br></pre></td></tr></table></figure></div>



<p><strong>安装MySQL-server</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">root@1bf7034a513e:/# apt install -y mysql-server</span><br></pre></td></tr></table></figure></div>



<p><strong>启动MySQL</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下面命令二选一即可（两种方案都可以）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方案一</span></span><br><span class="line">root@1bf7034a513e:/# service mysql start</span><br><span class="line"> * Starting MySQL database server mysqld                                                                     </span><br><span class="line"> </span><br><span class="line"><span class="comment">#方案二</span></span><br><span class="line">root@1bf7034a513e:/# systemctl start mysql</span><br></pre></td></tr></table></figure></div>



<p><strong>设置MySQL开机自启动</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">root@1bf7034a513e:/# systemctl <span class="built_in">enable</span> mysql</span><br></pre></td></tr></table></figure></div>



<p><strong>查看MySQL的运行状态</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下两种方案均可，二选一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方案一</span></span><br><span class="line">root@1bf7034a513e:/# service mysql status</span><br><span class="line"> * /usr/bin/mysqladmin  Ver 8.0.40-0ubuntu0.24.04.1 <span class="keyword">for</span> Linux on x86_64 ((Ubuntu))</span><br><span class="line">Copyright (c) 2000, 2024, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Server version          8.0.40-0ubuntu0.24.04.1</span><br><span class="line">Protocol version        10</span><br><span class="line">Connection              Localhost via UNIX socket</span><br><span class="line">UNIX socket             /var/run/mysqld/mysqld.sock</span><br><span class="line">Uptime:                 5 min 10 sec</span><br><span class="line"></span><br><span class="line">Threads: 2  Questions: 12  Slow queries: 0  Opens: 119  Flush tables: 3  Open tables: 38  Queries per second avg: 0.038</span><br><span class="line"></span><br><span class="line"><span class="comment">#方案二</span></span><br><span class="line">root@1bf7034a513e:/# systemctl status mysql</span><br></pre></td></tr></table></figure></div>



<p><strong>MySQL的一些简单配置</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录mysql-server（刚安装没有设置密码，提示输入密码时按回车即可！）</span></span><br><span class="line">root@1bf7034a513e:/# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 14</span><br><span class="line">Server version: 8.0.40-0ubuntu0.24.04.1 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2024, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置mysql-server的密码，我这里设为123456</span></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现所有IP均可登录你的mysql-server</span></span><br><span class="line"><span class="comment">#首先修改/etc/mysql/mysql.conf.d/mysqld.cnf这个配置文件</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment">#找到bind-address这一行</span></span><br><span class="line"><span class="comment">#把127.0.0改成0.0.0.0即可！</span></span><br><span class="line"><span class="comment">#接下来再重启mysql-server</span></span><br><span class="line">root@1bf7034a513e:/# service mysql restart</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux系统文件目录</title>
    <url>/2025/03/20/Linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg"
                      alt="img"
                ></p>
<ul>
<li><p><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p><strong>&#x2F;boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>
</li>
<li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p>
</li>
<li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p>
</li>
<li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种<code>伪文件系统</code>（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>&#x2F;root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p>
</li>
<li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>
</li>
<li><p><strong>&#x2F;srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p><strong>&#x2F;sys</strong>：</p>
<p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p>
<p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p>
<p>该文件系统是内核设备树的一个直观反映。</p>
<p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p>
</li>
<li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p>
</li>
<li><p><strong>&#x2F;usr</strong>：<br> usr 是 unix system resources(unix 系统资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p>
</li>
<li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p>
</li>
<li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p>
</li>
<li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>
</li>
<li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
</search>
